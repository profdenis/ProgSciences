{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cours de programmation en sciences","text":"<p>Auteur : Denis Rinfret</p>"},{"location":"#ressources","title":"Ressources","text":"<ol> <li>Documentation Python</li> <li>Livres :<ul> <li>\u00c0 venir</li> </ul> </li> </ol>"},{"location":"#logiciels","title":"Logiciels","text":"<ol> <li>Python<ul> <li>T\u00e9l\u00e9chargez et installez la derni\u00e8re version stable disponible</li> </ul> </li> <li>PyCharm Community Edition<ul> <li>Ne t\u00e9l\u00e9chargez pas la version professionnelle</li> <li>Descendez vers le bas de la page pour trouver la version Community</li> </ul> </li> </ol>"},{"location":"Algorithmes/01_Premiers_Algorithmes/","title":"Introduction aux algorithmes","text":""},{"location":"Algorithmes/01_Premiers_Algorithmes/#algorithmes-definitions","title":"Algorithmes : D\u00e9finitions","text":"<p>Commen\u00e7ons par quelques d\u00e9finitions du mot algorithme :</p> <ul> <li>Cambridge Dictionary<ul> <li>une liste d\u2019instructions pour r\u00e9soudre un probl\u00e8me</li> <li>un ensemble d\u2019instructions ou de r\u00e8gles math\u00e9matiques qui, habituellement   donn\u00e9es \u00e0 un ordinateur, aideront \u00e0 calculer une r\u00e9ponse \u00e0 un   probl\u00e8me</li> </ul> </li> <li>Merriam-Webster<ul> <li>une proc\u00e9dure pour r\u00e9soudre un probl\u00e8me math\u00e9matique (comme celui de   trouver le plus grand diviseur commun) en un nombre fini d\u2019\u00e9tapes qui   implique souvent la r\u00e9p\u00e9tition d\u2019une op\u00e9ration</li> <li>plus g\u00e9n\u00e9ralement : une proc\u00e9dure \u00e9tape par \u00e9tape pour r\u00e9soudre un   probl\u00e8me ou accomplir une certaine fin</li> </ul> </li> <li>Geeks for Geeks<ul> <li>Un ensemble fini de r\u00e8gles ou d\u2019instructions \u00e0 suivre dans les calculs   ou d\u2019autres op\u00e9rations pour r\u00e9soudre des probl\u00e8mes</li> <li>Une proc\u00e9dure pour r\u00e9soudre un probl\u00e8me math\u00e9matique en un nombre fini   d\u2019\u00e9tapes qui implique souvent des op\u00e9rations r\u00e9cursives</li> </ul> </li> <li>Autres d\u00e9finitions possibles :<ol> <li>Un algorithme est une proc\u00e9dure bien d\u00e9finie qui permet \u00e0 un ordinateur    de r\u00e9soudre un probl\u00e8me. Une autre fa\u00e7on de d\u00e9crire un algorithme est de    dire qu\u2019il s\u2019agit d\u2019une approche \u00e9tape par \u00e9tape pour r\u00e9soudre un    probl\u00e8me ou accomplir une t\u00e2che.</li> <li>En informatique et en math\u00e9matiques, un algorithme est une s\u00e9quence    d\u2019instructions dont le principal objectif est de r\u00e9soudre un probl\u00e8me    sp\u00e9cifique, d\u2019effectuer une certaine action ou de calculer. Dans certains    cas, les algorithmes sont utilis\u00e9s pour le traitement des donn\u00e9es et les    t\u00e2ches de raisonnement automatis\u00e9.</li> <li>Un algorithme est un ensemble sp\u00e9cifique d\u2019instructions con\u00e7ues pour    effectuer une t\u00e2che particuli\u00e8re. Cela peut \u00eatre un processus simple,    comme la multiplication de deux nombres, ou une op\u00e9ration complexe, comme    la lecture d\u2019un fichier vid\u00e9o compress\u00e9. Les moteurs de recherche    utilisent des algorithmes complexes pour trier les pages Web pertinentes    parmi des millions de r\u00e9sultats.</li> <li>Un algorithme en informatique est une proc\u00e9dure bien d\u00e9finie qui prend    certaines valeurs en entr\u00e9e et les traite pour produire une certaine    valeur en sortie. Les algorithmes sont essentiels pour l\u2019ex\u00e9cution de    proc\u00e9dures \u00e9tape par \u00e9tape pour les calculs et le traitement des donn\u00e9es.</li> <li>Un algorithme est une s\u00e9quence de comportement \u00e9tape par \u00e9tape qui    d\u00e9finit un ensemble de calculs. Ils sont utilis\u00e9s pour le calcul, le    traitement des donn\u00e9es, le raisonnement automatis\u00e9 et d\u2019autres t\u00e2ches.</li> </ol> </li> </ul> <p>Veuillez noter qu\u2019un algorithme doit \u00eatre clair et sans ambigu\u00eft\u00e9, il doit avoir des entr\u00e9es et des sorties bien d\u00e9finies, et il doit \u00eatre fini.</p> <p>Lors de la conception d\u2019un algorithme, il y aura g\u00e9n\u00e9ralement des entr\u00e9es donn\u00e9es \u00e0 l\u2019algorithme. Ensuite, apr\u00e8s avoir effectu\u00e9 des calculs en utilisant ces entr\u00e9es, les r\u00e9sultats seront \u00e9mis ou renvoy\u00e9s \u00e0 un utilisateur, ou \u00e0 un autre algorithme qui utilisera ces r\u00e9sultats pour effectuer ses propres calculs \u00e0 \u00eatre sortis ou renvoy\u00e9s. En d\u2019autres termes, les algorithmes pourraient \u00eatre cha\u00een\u00e9s les uns \u00e0 la suite des autres.</p>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#notation-sous-forme-de-diagrammes","title":"Notation sous forme de diagrammes","text":"<p>Pour repr\u00e9senter les algorithmes graphiquement, nous allons utiliser diagrammes d\u2019\u00e9tats UML, en utilisant la notation disponible dans le logiciel PlantUML.</p> <p>Pour repr\u00e9senter les algorithmes de mani\u00e8re graphique, nous utiliserons les Diagrammes d\u2019Activit\u00e9, et nous utiliserons PlantUML pour les dessiner. Nous repr\u00e9senterons \u00e9galement les algorithmes en pseudocode, dans une notation similaire \u00e0 celle du langage de programmation Python. Plus tard, apr\u00e8s avoir discut\u00e9 des types de donn\u00e9es et de certains autres sujets, nous \u00e9crirons directement les algorithmes dans le langage de programmation Python. Le diagramme suivant montre la notation pour les diagrammes d\u2019activit\u00e9 les plus basiques.</p> <p></p> Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\nnote right \n    noeud de d\u00e9part\nend note\n:some action;\nnote right\n   action simple : lire une valeur, faire un calcul, ...\nend note\n:some other action;\nstop\nnote right\n    noeud de fin\nend note\n@enduml\n</code></pre>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#exemples","title":"Exemples","text":""},{"location":"Algorithmes/01_Premiers_Algorithmes/#calcul-de-laire-dun-rectangle","title":"Calcul de l\u2019aire d\u2019un rectangle","text":"<p>Commen\u00e7ons par un exemple simple : comment calculons-nous l\u2019aire d\u2019un rectangle ? Nous avons besoin de 2 valeurs pour calculer l\u2019aire d\u2019un rectangle : sa <code>largeur</code> et sa <code>hauteur</code>. Nous supposons pour l\u2019instant que ces 2 valeurs seront entr\u00e9es dans le programme par un utilisateur, \u00e0 l\u2019aide d\u2019un dispositif d\u2019entr\u00e9e (probablement un clavier), et que les r\u00e9sultats seront affich\u00e9s \u00e0 l\u2019utilisateur \u00e0 l\u2019aide d\u2019un dispositif de sortie (probablement un \u00e9cran). Nous verrons plus tard que les entr\u00e9es et les sorties peuvent ne pas \u00eatre prises ou donn\u00e9es directement par/aux utilisateurs, mais pourraient plut\u00f4t \u00eatre donn\u00e9es \u00e0 une fonction en tant que param\u00e8tres, ou renvoy\u00e9es par une fonction.</p> <ul> <li>Entr\u00e9es : la <code>largeur</code> et la <code>hauteur</code> du rectangle</li> <li>Sortie : l\u2019<code>aire</code> du rectangle</li> </ul>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#diagramme","title":"Diagramme","text":"Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:entrer largeur;\n:entrer hauteur;\n:aire = largeur * hauteur;\n:afficher aire;\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#pseudocode","title":"Pseudocode","text":"<pre><code>largeur = entrer()\nhauteur = entrer()\naire = largeur * hauteur\nafficher(aire)\n</code></pre>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#discussion","title":"Discussion","text":"<p>Certaines actions concernent le calcul de certaines valeurs bas\u00e9es sur d\u2019autres valeurs, comme <code>aire = largeur * hauteur</code>. Notez que nous utilisons <code>*</code> comme symbole de multiplication. Dans ce cas, le calcul <code>largeur * hauteur</code> est \u00e9crit \u00e0 droite du signe \u00e9gal (<code>=</code>), et le r\u00e9sultat est conserv\u00e9 dans <code>aire</code>, qui sera affich\u00e9 dans l\u2019\u00e9tape suivante.</p> <p>Dans cet exemple, il y a 3 variables : <code>largeur</code>, <code>hauteur</code> et <code>aire</code>. Ces variables sont utilis\u00e9es pour repr\u00e9senter ou retenir certaines valeurs qui seront entr\u00e9es ou calcul\u00e9es, et qui seront r\u00e9utilis\u00e9es plus tard dans les calculs ou envoy\u00e9es en sortie.</p> <p>Les diagrammes d\u2019activit\u00e9 sont de haut niveau, ce qui signifie qu\u2019ils sont souvent un peu simplifi\u00e9s, ils n\u2019entrent pas dans chaque petit d\u00e9tail. Nous ne nous emb\u00eatons pas \u00e0 d\u00e9finir chaque variable formellement, donc lorsque nous \u00e9crivons <code>entrer largeur</code>, il est sous-entendu qu\u2019une variable nomm\u00e9e <code>largeur</code> sera d\u00e9finie, et sa valeur sera ce qui a \u00e9t\u00e9 entr\u00e9. De m\u00eame, pour <code>afficher aire</code>, nous disons simplement que nous voulons que <code>aire</code> soit affich\u00e9e en sortie, mais nous ne nous emb\u00eatons pas avec les d\u00e9tails d\u2019o\u00f9 et comment <code>aire</code> sera affich\u00e9e. Nous serons un peu plus pr\u00e9cis dans le pseudocode, et beaucoup plus pr\u00e9cis lorsque nous \u00e9crirons un programme pour faire les calculs pour de vrai. \u00c0 ce stade, les diagrammes sont utilis\u00e9s pour avoir une id\u00e9e de ce qui doit \u00eatre fait. Ils deviendront plus compliqu\u00e9s quand nous rencontrerons des algorithmes plus complexes. Avec un peu d\u2019exp\u00e9rience, nous serons en mesure d\u2019\u00e9crire du code directement sans cr\u00e9er d\u2019abord des diagrammes d\u2019activit\u00e9 ou \u00e9crire du pseudocode, mais m\u00eame avec de l\u2019exp\u00e9rience, lorsque nous rencontrons des probl\u00e8mes plus complexes, les diagrammes aident souvent. De nombreux types de diagrammes seront utilis\u00e9s lors de la conception et du d\u00e9veloppement de syst\u00e8mes logiciels, tels que les diagrammes de s\u00e9quences, de cas d\u2019utilisation, d\u2019\u00e9tats, de classes\u2026</p> <p>Les entr\u00e9es et les sorties sont elles-m\u00eames des t\u00e2ches complexes, et d\u00e9pendront exactement de la fa\u00e7on dont nous voulons entrer et sortir (afficher) les valeurs. Nous r\u00e9sumons donc ces t\u00e2ches et nous disons simplement pour l\u2019instant que nous entrons et sortons des valeurs d\u2019une certaine mani\u00e8re. Dans le pseudocode, nous \u00e9crivons ces 2 t\u00e2ches un peu diff\u00e9remment par rapport aux diagrammes : nous utilisons la notation de fonction pour \u00eatre un peu plus pr\u00e9cis. La t\u00e2che d\u2019entrer d\u2019une valeur produit (ou donne ou retourne) une valeur, et nous stockons cette valeur dans une variable, comme dans <code>largeur = entrer()</code>. Nous utilisons les parenth\u00e8ses<code>()</code> pour signifier que nous appelons, ou ex\u00e9cutons, la fonction <code>entrer</code>. La valeur produite est stock\u00e9e dans la variable <code>largeur</code>. Nous disons aussi que la valeur renvoy\u00e9e par la fonction <code>entrer</code> est assign\u00e9e \u00e0 la variable <code>largeur</code>.</p> <p>Pour pouvoir accomplir sa t\u00e2che, la fonction <code>afficher</code> a besoin de savoir quelle valeur afficher, donc nous lui donnons une valeur entre les <code>()</code> lorsque nous l\u2019appelons. Dans notre exemple, nous lui avons donn\u00e9 la variable <code>aire</code>, alors elle affiche la valeur contenue dans la variable <code>aire</code>. <code>afficher</code> ne renvoie aucune valeur, c\u2019est pourquoi nous ne l\u2019assignons \u00e0 rien.</p>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#meilleures-entrees-et-sorties","title":"Meilleures entr\u00e9es et sorties","text":"<p>Un probl\u00e8me lors de l\u2019entr\u00e9e d\u2019une valeur dans l\u2019exemple pr\u00e9c\u00e9dent est que nous ne donnons aucune information \u00e0 l\u2019utilisateur sur ce qui doit \u00eatre entr\u00e9. Dans ce cas, l\u2019utilisateur devinera probablement que la largeur et la hauteur doivent \u00eatre entr\u00e9es pour pouvoir calculer l\u2019aire d\u2019un rectangle, mais laquelle doit \u00eatre entr\u00e9e en premier ? Dans ce cas, cela n\u2019a pas vraiment d\u2019importance, car nous obtiendrons les m\u00eames r\u00e9sultats, mais en g\u00e9n\u00e9ral, l\u2019inversion de 2 entr\u00e9es peut changer consid\u00e9rablement les r\u00e9sultats. Nous avons donc besoin de donner plus d\u2019informations \u00e0 l\u2019utilisateur.</p> <p>Voici 2 versions faisant la m\u00eame chose.</p>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#diagrammes","title":"Diagrammes","text":"Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:afficher \"Calcul de l'aire d'un rectangle\";\n:afficher \"Entrez la largeur du rectangle :\";\n:entrer largeur;\n:afficher \"Entrez la hauteur du rectangle :\";\n:entrer hauteur;\n:aire = largeur * hauteur;\n:afficher \"l'aire est\";\n:afficher aire;\nstop\n@enduml\n</code></pre> Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:afficher(\"Calcul de l'aire d'un rectangle\");\n:largeur = entrer(\"Entrez la largeur du rectangle :\");\n:hauteur = entrer(\"Entrez la hauteur du rectangle :\");\n:aire = largeur * hauteur;\n:afficher(\"l'aire est\", aire);\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#discussion_1","title":"Discussion","text":"<p>Le premier de ces deux diagrammes est correct, mais il serait g\u00e9n\u00e9ralement consid\u00e9r\u00e9 comme trop verbeux. Nous laisserons de c\u00f4t\u00e9 la sortie suppl\u00e9mentaire pour nous concentrer sur l\u2019algorithme lui-m\u00eame, ou nous utiliserons la deuxi\u00e8me version dans laquelle une nouvelle version de la fonction <code>entrer</code> est utilis\u00e9e directement dans les diagrammes. Cette version de la fonction <code>entrer</code> accepte une cha\u00eene de caract\u00e8res en param\u00e8tre, qui sera affich\u00e9e avant d\u2019attendre qu\u2019une valeur soit entr\u00e9e. Une cha\u00eene de caract\u00e8res, pour la distinguer d\u2019une ou de plusieurs variables, est donn\u00e9e entre guillemets doubles <code>\"\"</code>.</p> <p>La fonction <code>afficher</code> est \u00e9galement utilis\u00e9e diff\u00e9remment. On lui donne 2 choses \u00e0 afficher, une cha\u00eene et une variable contenant les r\u00e9sultats. Elle les affichera l\u2019une apr\u00e8s l\u2019autre.</p> <p>Nous aurons besoin de messages de sortie plus complets lors de l\u2019\u00e9criture du code, et nous les inclurons souvent lors de l\u2019\u00e9criture du pseudocode, mais pas lors de la cr\u00e9ation de diagrammes d\u2019activit\u00e9 pour les garder plus petits et nous aider \u00e0 nous concentrer sur l\u2019algorithme lui-m\u00eame, et non sur les d\u00e9tails des entr\u00e9es et des sorties, \u00e0 moins que l\u2019algorithme devait traiter les entr\u00e9es et les sorties d\u2019une mani\u00e8re tr\u00e8s sp\u00e9cifique.</p>"},{"location":"Algorithmes/01_Premiers_Algorithmes/#pseudocode_1","title":"Pseudocode","text":"<pre><code>afficher(\"Calcul de l'aire d'un rectangle\")\nlargeur = entrer(\"Entrez la largeur du rectangle :\")\nhauteur = entrer(\"Entrez la hauteur du rectangle :\")\naire = largeur * hauteur\nafficher(\"l'aire est\", aire)\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/","title":"Les conditionnelles","text":""},{"location":"Algorithmes/02_Conditionnelles/#prendre-des-decisions","title":"Prendre des d\u00e9cisions","text":"<p>Les algorithmes qui ne font que prendre des entr\u00e9es, calculer des valeurs \u00e0 l\u2019aide de formules et produire des r\u00e9sultats, ne sont pas tr\u00e8s int\u00e9ressants, ou du moins, ils deviendront rapidement redondants. Nous  avons besoin d\u2019autres concepts de programmation pour permettre de supporter des algorithmes diff\u00e9rents et plus complexes.</p> <p>Un concept utile est la conditionnelle, utilis\u00e9e pour faire des choix pendant l\u2019ex\u00e9cution d\u2019un algorithme. On l\u2019appelle parfois une branche, car lorsque nous ex\u00e9cutons un algorithme, nous pouvons nous diriger vers l\u2019une des nombreuses branches en fonction de certaines conditions. Pour commencer, nous examinerons des exemples avec seulement 2 cas possibles, avec une condition qui est soit <code>vrai</code> soit <code>faux</code>.</p> <p>Commen\u00e7ons par un exemple pour donner l\u2019id\u00e9e g\u00e9n\u00e9rale avec un algorithme simple. Des exemples plus complexes suivront.</p>"},{"location":"Algorithmes/02_Conditionnelles/#trouver-le-plus-petit-de-2-nombres","title":"Trouver le plus petit de 2 nombres","text":"<ul> <li>Entr\u00e9es : 2 nombres</li> <li>Sortie : le plus petit nombre des deux</li> </ul>"},{"location":"Algorithmes/02_Conditionnelles/#diagrammes","title":"Diagrammes","text":""},{"location":"Algorithmes/02_Conditionnelles/#version-1-condition-a-lexterieur-du-losange","title":"Version 1 : condition \u00e0 l\u2019ext\u00e9rieur du losange","text":"Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:entrer premier;\n:entrer deuxi\u00e8me;\nfloating note right\n    le losange est un embranchement\n    (ou une conditionnelle)\nend note \nif () then (premier &lt; deuxi\u00e8me ?)\n    :afficher premier;\n    note left\n        si la condition est\n        vraie, faire ceci\n    end note\nelse (sinon) \n    :afficher deuxi\u00e8me;\n    note right\n        sinon, si la condition est\n        fausse, faire ceci\n    end note\nendif\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#version-2-condition-a-linterieur-du-losange","title":"Version 2 : condition \u00e0 l\u2019int\u00e9rieur du losange","text":"<p>Le losange est \u201c\u00e9tir\u00e9\u201d horizontalement pour faire de la place \u00e0 la condition, donc le losange n\u2019est d\u00e9sormais plus un losange, il devient un hexagone.</p> <p></p> Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:entrer premier;\n:entrer deuxi\u00e8me;\nfloating note right\n    on peut \u00e9galement mettre la condition \n    dans le noeud d'embranchement\nend note \nif (premier &lt; deuxi\u00e8me ?) then (oui)\n    :afficher premier;\nelse (non)\n    :afficher deuxi\u00e8me;\nendif\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#discussion","title":"Discussion","text":"<p>Seule l\u2019une des deux branches de la conditionnelle sera ex\u00e9cut\u00e9e. Si la condition est vraie, ce qui signifie que le premier nombre est plus petit que l\u2019autre, alors le premier nombre sera affich\u00e9. Si la condition est fausse, alors la seconde branche \u00e0 droite sera ex\u00e9cut\u00e9e, et le deuxi\u00e8me nombre sera affich\u00e9, ce qui signifie que le deuxi\u00e8me nombre n\u2019est pas plus petit que le premier. Mais cela ne signifie pas que le second nombre est plus grand que le premier. Si les deux nombres sont \u00e9gaux, alors la condition est fausse, donc la branche non sera ex\u00e9cut\u00e9e. Les exemples suivants montreront comment traiter l\u2019\u00e9galit\u00e9 entre les deux nombres dans un cas sp\u00e9cifique, donnant ainsi 3 possibilit\u00e9s, ou en d\u2019autres termes, donnant 3 options, ou 3 branches.</p> <p>Notez qu\u2019apr\u00e8s une condition, les deux (ou plus) branches doivent normalement se rejoindre en un losange pour continuer l\u2019algorithme. Dans cet exemple, l\u2019algorithme se termine apr\u00e8s la conditionnelle.</p>"},{"location":"Algorithmes/02_Conditionnelles/#pseudocode","title":"Pseudocode","text":"<pre><code>premier = entrer()\ndeuxi\u00e8me = entrer()\nsi (premier &lt; deuxi\u00e8me)\n    afficher(premier)\nelse\n    afficher(deuxi\u00e8me)\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#trouver-le-plus-petit-de-2-nombres-version-2","title":"Trouver le plus petit de 2 nombres, version 2","text":"<p>Afficher la r\u00e9ponse sous forme de texte \u00e0 la place de la valeur du plus petit nombre.</p> <ul> <li>Entr\u00e9es : 2 nombres</li> <li>Sortie : un message disant que soit le premier nombre ou le deuxi\u00e8me nombre   est le plus petit des 2 nombres</li> </ul>"},{"location":"Algorithmes/02_Conditionnelles/#diagramme","title":"Diagramme","text":"Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:entrer premier;\n:entrer deuxi\u00e8me;\nif (premier &lt; deuxi\u00e8me?) then (oui)\n    :afficher \"Le premier nombre est le plus petit\";\nelse (non)\n    :afficher \"Le deuxi\u00e8me nombre est le plus petit\";\nendif\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#discussion_1","title":"Discussion","text":"<p>Cet exemple n\u2019est pas tout \u00e0 fait correct, car si le deuxi\u00e8me nombre n\u2019est pas plus grand que le premier, cela ne signifie pas automatiquement que le deuxi\u00e8me nombre est le plus petit des 2 : ils pourraient \u00eatre \u00e9gaux. Lors de l\u2019affichage de la valeur du plus petit nombre, cela n\u2019a pas d\u2019importance, nous obtiendrons le bon r\u00e9sultat, mais lors de l\u2019affichage d\u2019un message texte, cela ne sera pas correct dans le cas sp\u00e9cifique o\u00f9 les 2 valeurs sont \u00e9gales. Le prochain exemple utilise une conditionnelle \u00e0 l\u2019int\u00e9rieur d\u2019une autre conditionnelle pour distinguer les 3 cas.</p>"},{"location":"Algorithmes/02_Conditionnelles/#trouver-le-plus-petit-de-2-nombres-version-3","title":"Trouver le plus petit de 2 nombres, version 3","text":"<ul> <li>Entr\u00e9es : 2 nombres</li> <li>Sortie : un message disant que soit le premier nombre ou le deuxi\u00e8me nombre   est le plus petit des 2 nombres, ou un message qui dit que les 2 nombres sont   \u00e9gaux</li> </ul>"},{"location":"Algorithmes/02_Conditionnelles/#diagramme_1","title":"Diagramme","text":"Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:entrer premier;\n:entrer deuxi\u00e8me;\nif () then (premier &lt; deuxi\u00e8me ?)\n    :afficher \"Le premier nombre est le plus petit\";\nelse  (sinon)\n    if () then (premier &gt; deuxi\u00e8me ?)\n        :afficher \"Le deuxi\u00e8me nombre est le plus petit\";\n    else (sinon)\n        :afficher \"Les deux nombres sont \u00e9gaux\";\n    endif\nendif\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#discussion_2","title":"Discussion","text":"<p>Lorsque nous avons 3 cas (ou branches) ou plus, une seule conditionnelle ne suffira pas, car elle ne distingue que 2 cas, la partie vraie et la partie fausse de la condition. Nous d\u00e9terminons d\u2019abord si le premier nombre est plus petit que le second, puis si oui, nous proc\u00e9dons comme avant. Si le premier nombre n\u2019est pas plus petit que le second, alors nous avons 2 autres cas : le second nombre est plus petit, ou les 2 nombres sont \u00e9gaux. Nous avons donc besoin d\u2019une autre conditionnelle pour distinguer ces 2 cas.</p>"},{"location":"Algorithmes/02_Conditionnelles/#mise-en-page-alternative-du-diagramme","title":"Mise en page alternative du diagramme","text":"<p>Ce diagramme repr\u00e9sente exactement le m\u00eame algorithme, mais les noeuds sont agenc\u00e9s diff\u00e9remment.</p> <p></p> Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\n!pragma useVerticalIf on\n:entrer premier;\n:entrer deuxi\u00e8me;\nif (premier &lt; deuxi\u00e8me ?) then (oui)\n    :afficher \"Le premier nombre est le plus petit\";\n(non) else if (premier &gt; deuxi\u00e8me ?) then (oui)\n    :afficher \"Le deuxi\u00e8me nombre est le plus petit\";\nelse (non)\n    :afficher \"Les deux nombres sont \u00e9gaux\";\nendif\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#pseudocode_1","title":"Pseudocode","text":""},{"location":"Algorithmes/02_Conditionnelles/#version-1","title":"Version 1","text":"<pre><code>premier = lire(\"Entrez le premier nombre: \")\ndeuxi\u00e8me = lire(\"Entrez le deuxi\u00e8me nombre: \")\nsi premier &lt; deuxi\u00e8me\n    afficher(premier)\nsinon\n    afficher(deuxi\u00e8me)\nfin si\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#version-2","title":"Version 2","text":"<pre><code>premier = lire(\"Entrez le premier nombre: \")\ndeuxi\u00e8me = lire(\"Entrez le deuxi\u00e8me nombre: \")\nsi premier &lt; deuxi\u00e8me\n    afficher(\"Le premier nombre est le plus petit\")\nsinon\n    afficher(\"Le deuxi\u00e8me nombre est le plus petit\")\nfin si\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#version-3","title":"Version 3","text":"<pre><code>premier = lire(\"Entrez le premier nombre: \")\ndeuxi\u00e8me = lire(\"Entrez le deuxi\u00e8me nombre: \")\nsi premier &lt; deuxi\u00e8me\n    afficher(\"Le premier nombre est le plus petit\")\nsinon\n    si premier &gt; deuxi\u00e8me :\n        afficher(\"Le deuxi\u00e8me nombre est le plus petit\")\n    sinon :\n        afficher(\"Les deux nombres sont \u00e9gaux\")\n    fin si\nfin si\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#utiliser-un-commutateur-a-la-place-dune-sequence-de-conditions","title":"Utiliser un commutateur \u00e0 la place d\u2019une s\u00e9quence de conditions","text":"<p>Il est souvent pr\u00e9f\u00e9rable d\u2019utiliser un commutateur (ou <code>switch</code> en anglais) pour remplacer les conditionnelles, surtout lorsqu\u2019il y a beaucoup de cas d\u00e9termin\u00e9s par de nombreuses conditions. Cela rend l\u2019algorithme beaucoup plus facile \u00e0 suivre. Malheureusement, ce ne sont pas tous les langages de programmation qui supportent les commutateurs, et certains langages de programmation ne supportent que certains types sp\u00e9cifiques de commutateurs.</p> <p>L\u2019exemple suivant utilise un commutateur pour remplacer les conditionnelles pour r\u00e9soudre le m\u00eame probl\u00e8me que l\u2019exemple pr\u00e9c\u00e9dent. Il est suivi par un autre exemple avec plus de cas (ou branches), en utilisant un <code>switch</code> d\u2019une mani\u00e8re l\u00e9g\u00e8rement diff\u00e9rente.</p>"},{"location":"Algorithmes/02_Conditionnelles/#le-plus-petit-de-2-nombres-avec-un-switch","title":"Le plus petit de 2 nombres avec un <code>switch</code>","text":""},{"location":"Algorithmes/02_Conditionnelles/#diagramme_2","title":"Diagramme","text":"Code PlantUML <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:entrer premier;\n:entrer deuxi\u00e8me;\nswitch (?) \ncase (premier &lt; deuxi\u00e8me ?)\n    :afficher \"Le premier nombre est le plus petit\";\ncase (       premier &gt; deuxi\u00e8me ?)\n     :afficher \"Le deuxi\u00e8me nombre est le plus petit\";\ncase (premier = deuxi\u00e8me)\n     :afficher \"Les deux nombres sont \u00e9gaux\";\nendswitch\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/02_Conditionnelles/#discussion_3","title":"Discussion","text":"<p>Nous avons un seul losange avec un point d\u2019interrogation pour repr\u00e9senter le switch, puis nous avons des fl\u00e8ches \u00e9tiquet\u00e9es avec les diff\u00e9rentes conditions. L\u2019algorithme suivra la fl\u00e8che dont la condition \u00e9value \u00e0 vrai. Il ne devrait y avoir qu\u2019une seule condition qui est vraie \u00e0 tout moment, pour \u00e9viter la confusion quant \u00e0 la fl\u00e8che qui doit \u00eatre suivie. Il peut y avoir un cas sp\u00e9cial suppl\u00e9mentaire \u00e9tiquet\u00e9 <code>d\u00e9faut</code>, qui sera utilis\u00e9 si tous les autres cas sont faux. Dans l\u2019exemple ci-dessus, il n\u2019est pas n\u00e9cessaire d\u2019avoir un cas d\u00e9faut, car nos conditions couvrent tous les cas. Mais ici, on pourrait remplacer le dernier cas qui v\u00e9rifie l\u2019\u00e9galit\u00e9 entre les deux nombres par un cas d\u00e9faut, pour obtenir un r\u00e9sultat \u00e9quivalent.</p> <p>Note : ici, comme nous l\u2019avons fait dans les autres exemples, nous supposons que les valeurs d\u2019entr\u00e9e sont du bon type, dans ce cas des nombres, pour que les algorithmes fonctionnent correctement. En g\u00e9n\u00e9ral, nous devrions nous assurer que les valeurs sont du bon type. Une discussion sur les types de donn\u00e9es et comment valider l\u2019entr\u00e9e fera partie d\u2019un autre chapitre.</p>"},{"location":"Algorithmes/03_Boucles/","title":"Les boucles","text":""},{"location":"Algorithmes/03_Boucles/#boucles-sans-compteurs","title":"Boucles sans compteurs","text":"<p>Les boucles sans compteurs sont bas\u00e9es seulement sur une condition, et ne comptent pas le nombre de fois que la boucle est r\u00e9p\u00e9t\u00e9e. Pas opposition, les boucles avec compteurs comptent le nombre de r\u00e9p\u00e9titions de la boucle, et la d\u00e9cision de r\u00e9p\u00e9ter la boucle ou non est bas\u00e9e sur le nombre de r\u00e9p\u00e9titions conserv\u00e9 dans le compteur.</p>"},{"location":"Algorithmes/03_Boucles/#boucle-repeter-jusqua","title":"Boucle <code>r\u00e9p\u00e9ter ... jusqu'\u00e0</code>","text":"<p>En anglais : <code>repeat ... until</code>.</p> <p>On place une conditionnelle \u00e0 la fin de ce qui doit \u00eatre r\u00e9p\u00e9t\u00e9 (\u00e0 la fin de la boucle). La boucle arr\u00eate quand la condition du <code>jusqu'\u00e0</code> est vraie, et la boucle continue si la condition est fausse.</p> <p>Donc le retour arri\u00e8re vers le d\u00e9but de la boucle s\u2019effectue quand la condition est fausse. Quand la condition est vraie, on sort de la boucle.</p> <p></p> PlantUML code <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:faire quelque chose avant la boucle;\nrepeat\n    :faire quelque chose \u00e0 l'int\u00e9rieur de la boucle;\nrepeat while (condition ?) is (faux) not (vrai)\n:faire quelque chose apr\u00e8s la boucle;\nstop\n@enduml\n</code></pre> <pre><code>// faire quelque chose avant la boucle\nr\u00e9p\u00e9ter\n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\njusqu'\u00e0 condition\n// faire quelque chose apr\u00e8s la boucle\n</code></pre>"},{"location":"Algorithmes/03_Boucles/#boucle-faire-tant-que","title":"Boucle <code>faire ... tant que</code>","text":"<p>En anglais : <code>do ... while</code>.</p> <p>On place une conditionnelle \u00e0 la fin de ce qui doit \u00eatre r\u00e9p\u00e9t\u00e9 (\u00e0 la fin de la boucle). La boucle arr\u00eate quand la condition du <code>while</code> est fausse, et la boucle continue si la condition est vraie.</p> <p>Donc le retour arri\u00e8re vers le d\u00e9but de la boucle s\u2019effectue quand la condition est vraie. Quand la condition est fausse, on sort de la boucle.</p> <p></p> PlantUML code <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:faire quelque chose avant la boucle;\nrepeat\n    :faire quelque chose \u00e0 l'int\u00e9rieur de la boucle;\nrepeat while (condition ?) is (vrai) not (faux)\n:faire quelque chose apr\u00e8s la boucle;\nstop\n@enduml\n</code></pre> <pre><code>// faire quelque chose avant la boucle\nfaire\n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\ntantque condition\n// faire quelque chose apr\u00e8s la boucle\n</code></pre>"},{"location":"Algorithmes/03_Boucles/#boucle-tant-que","title":"Boucle <code>tant que</code>","text":"<p>En anglais : <code>while</code>.</p> <p>La boucle <code>tant que</code> est diff\u00e9rente des 2 autres parce que la condition est plac\u00e9e au d\u00e9but de la boucle, et par cons\u00e9quent, la condition de boucle est \u00e9valu\u00e9e avant de faire quoi que se soit dans le corps la boucle. Le corps d\u2019une boucle <code>tant que</code> peut ne jamais \u00eatre ex\u00e9cut\u00e9e, mais le corps des boucles <code>faire ... tant que</code> et <code>r\u00e9p\u00e9ter ... jusqu'\u00e0</code> sont toujours ex\u00e9cut\u00e9s au moins une fois.</p> <p>Mais comme la boucle <code>faire ... tant que</code>, la boucle continue si la condition est vraie et arr\u00eate lorsque la condition est fausse. La diff\u00e9rence est qu\u2019\u00e0 la fin du corps de la boucle, on retournera automatiquement au d\u00e9but pour \u00e9valuer la condition \u00e0 nouveau et alors, on d\u00e9cidera si on continue ou non. Sinon, on doit sauter \u00e0 la premi\u00e8re instruction apr\u00e8s la boucle.</p> <p></p> PlantUML code <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:faire quelque chose avant la boucle;\nwhile (condition ?) is (vrai)\n    :faire quelque chose \u00e0 l'int\u00e9rieur de la boucle;\nendwhile (faux)\n:faire quelque chose apr\u00e8s la boucle;\nstop\n@enduml\n</code></pre> <pre><code>// faire quelque chose avant la boucle\ntantque condition :\n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\nfintantque\n// faire quelque chose apr\u00e8s la boucle\n</code></pre>"},{"location":"Algorithmes/03_Boucles/#boucles-avec-compteurs","title":"Boucles avec compteurs","text":"<p>On ajoute une variable, le compteur, qui commence avec la valeur 0 ou 1, et la condition de la boucle est bas\u00e9e sur ce compteur. Le compteur est souvent nomm\u00e9 <code>i</code> ou <code>j</code> ou <code>k</code> \u2026, comme dans la notation math\u00e9matique pour les sommations :</p> \\[\\sum_{i=1}^{n}i^2\\ \\ \\ .\\] <p>On utilise souvent aussi les variables avec des noms plus pr\u00e9cis, comme par exemple <code>nbEssais</code> (<code>nTries</code>) ou <code>compteur</code> (<code>count</code>).</p> <p>Il n\u2019y a pas de notation sp\u00e9ciale pour ce type de boucle dans les diagrammes, mais en pseudocode et dans la plupart des langages de programmation, il y a diff\u00e9rentes formes de boucles <code>pour</code> (<code>for</code>).</p> <p>Dans les diagrammes, on utilise normalement des boucles <code>tant que</code>, et dans le pseudocode et dans les diff\u00e9rents langages de programmation, on peut aussi utiliser les boucles <code>tant que</code>, mais on utilisera normalement les boucles <code>pour</code> lorsque possible. Les boucles <code>pour</code> sont, dans la plupart des langages, une forme compacte des boucles <code>tant que</code> avec compteurs.</p> <p></p> PlantUML code <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:faire quelque chose avant la boucle;\n:compteur = 1;\n:nbR\u00e9p\u00e9titions = 5;\nwhile (compteur &lt;= nbR\u00e9p\u00e9titions ?) is (oui)\n    :faire quelque chose \u00e0 l'int\u00e9rieur de la boucle;\n    :compteur = compteur + 1;\nendwhile (non)\n:faire quelque chose apr\u00e8s la boucle;\nstop\n@enduml\n</code></pre> <p>Dans la plupart des langages de programmation, il existe un op\u00e9rateur sp\u00e9cial pour incr\u00e9menter un entier, ce qui signifie qu\u2019il va ajouter 1 \u00e0 la valeur actuelle d\u2019un nombre entier. \u00c9crire <code>compteur++</code> est \u00e9quivalent \u00e0 \u00e9crire <code>compteur = compteur + 1</code>. Il est \u00e9galement possible de commencer avec <code>count = 0</code> au lieu de commencer avec 1. Pour faire le m\u00eame nombre d\u2019it\u00e9rations \u00e0 travers la boucle, nous devons changer la condition de la boucle pour utiliser <code>&lt;</code> au lieu de <code>&lt;=</code>.</p> <p></p> PlantUML code <pre><code>@startuml\nskinparam defaultFontSize 16\nstart\n:faire quelque chose avant la boucle;\n:compteur = 0;\n:nbR\u00e9p\u00e9titions = 5;\nwhile (compteur &lt; nbR\u00e9p\u00e9titions ?) is (oui)\n    :faire quelque chose \u00e0 l'int\u00e9rieur de la boucle;\n    :compteur++;\nendwhile (non)\n:faire quelque chose apr\u00e8s la boucle;\nstop\n@enduml\n</code></pre>"},{"location":"Algorithmes/03_Boucles/#pseudocode-avec-boucle-tant-que","title":"Pseudocode avec boucle <code>tant que</code>","text":"<pre><code>// faire quelque chose avant la boucle\ncompteur = 1\nnbR\u00e9p\u00e9titions = 5\ntantque compteur &lt;= nbR\u00e9p\u00e9titions :\n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\n    compteur = compteur + 1\nfintantque\n// faire quelque chose apr\u00e8s la boucle\n</code></pre> <pre><code>// faire quelque chose avant la boucle\ncompteur = 0\nnbR\u00e9p\u00e9titions = 5\ntantque compteur &lt; nbR\u00e9p\u00e9titions :\n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\n    compteur++\nfintantque\n// faire quelque chose apr\u00e8s la boucle\n</code></pre>"},{"location":"Algorithmes/03_Boucles/#pseudocode-avec-boucle-pour","title":"Pseudocode avec boucle <code>pour</code>","text":""},{"location":"Algorithmes/03_Boucles/#boucle-pour-de-style-algol","title":"Boucle <code>pour</code> de style Algol","text":"<pre><code>// faire quelque chose avant la boucle\nnbR\u00e9p\u00e9titions = 5\npour compteur de 0 \u00e0 nbR\u00e9p\u00e9titions :\n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\nfinpour\n// faire quelque chose apr\u00e8s la boucle\n</code></pre> <ul> <li>La valeur de d\u00e9part du compteur est 0.</li> <li>Il va y avoir une r\u00e9p\u00e9tition (ou it\u00e9ration) de la boucle pour chaque   valeur de 0 jusqu\u2019\u00e0 <code>nbR\u00e9p\u00e9titions</code>.<ul> <li>selon le langage de programmation utilis\u00e9, l\u2019intervalle de valeurs peut   \u00eatre inclusif ou exclusif par rapport \u00e0 la limite sup\u00e9rieure :<ul> <li>si inclusif, alors le nombre d\u2019it\u00e9rations dans la boucle donn\u00e9e plus   haut sera 6 parce qu\u2019il y aura une it\u00e9ration pour toutes les valeurs   enti\u00e8res de 0 \u00e0 5 inclusivement<ul> <li>dans ce cas, il serait probablement pr\u00e9f\u00e9rable d\u2019initialiser le   compteur \u00e0 1 au lieu de 0.</li> </ul> </li> <li>si exclusif, alors le nombre d\u2019it\u00e9rations dans la boucle donn\u00e9e plus   haut sera 5 parce que la boucle s\u2019arr\u00eatera lorsque <code>compteur == 5</code>,   donc il aura seulement des it\u00e9rations pour les valeurs de <code>compteur</code>   de 0, 1, 2, 3, et 4.</li> </ul> </li> <li>La limite inf\u00e9rieure (la valeur de d\u00e9part) est toujours inclusive.</li> <li>Nous utiliserons la convention que l\u2019intervalle est exclusif,   comme dans le langage de programmation Python.</li> </ul> </li> </ul>"},{"location":"Algorithmes/03_Boucles/#boucle-pour-de-style-c","title":"Boucle <code>pour</code> de style C","text":"<pre><code>// faire quelque chose avant la boucle\nnbR\u00e9p\u00e9titions = 5\npour (compteur = 0; compteur &lt; nbR\u00e9p\u00e9titions; compteur++) :\n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\nfinpour\n// faire quelque chose apr\u00e8s la boucle\n</code></pre> <ul> <li><code>compteur = 0</code> : s\u2019ex\u00e9cute une seule fois, juste avant l\u2019\u00e9valuation de la   condition de la boucle</li> <li><code>compteur &lt; nbR\u00e9p\u00e9titions</code> : la condition s\u2019ex\u00e9cute \u00e0 r\u00e9p\u00e9tition (ou pour   chaque it\u00e9ration) de la boucle, avant le corps de la boucle<ul> <li>comme pour une boucle <code>tant que</code>, si la condition est vraie, alors le   corps de la boucle est ex\u00e9cut\u00e9e</li> <li>sinon (si la condition est fausse), alors la boucle est termin\u00e9e et   l\u2019ex\u00e9cution continue avec les instructions suivant la boucle</li> </ul> </li> <li><code>nbR\u00e9p\u00e9titions++</code> : mise \u00e0 jour du compteur, qui s\u2019ex\u00e9cute \u00e0 la fin du   corps de la boucle, juste avant de revenir au d\u00e9but de la boucle pour   r\u00e9\u00e9valuer la condition</li> </ul>"},{"location":"Algorithmes/03_Boucles/#boucles-pour-chaque","title":"Boucles <code>pour chaque</code>","text":"<p>En anglais : <code>for each</code>.</p> <p>Les boucles <code>pour chaque</code> sont diff\u00e9rentes des autres boucles parce qu\u2019elles n\u00e9cessitent normalement l\u2019utilisation de collections de valeurs ou d\u2019objets, et d\u2019it\u00e9rateurs. Les collections, comme les tableaux et les listes, contiennent plusieurs valeurs ou objets, et les it\u00e9rateurs permettent de parcourir toutes les valeurs ou objets d\u2019une collection sous forme de s\u00e9quence.</p> <p>Les collections, les it\u00e9rateurs et les boucles <code>pour chaque</code> seront pr\u00e9sent\u00e9s de fa\u00e7on plus d\u00e9taill\u00e9e plus tard. Pour l\u2019instant, seulement une id\u00e9e g\u00e9n\u00e9rale du concept est pr\u00e9sent\u00e9e. Il est difficile de bien repr\u00e9senter les boucles <code>pour chaque</code> dans des diagrammes, donc les exemples seront uniquement sous forme de pseudocode.</p>"},{"location":"Algorithmes/03_Boucles/#boucle-pour-chaque-avec-intervalle","title":"Boucle <code>pour chaque</code> avec intervalle","text":"<pre><code>// faire quelque chose avant la boucle\nnbR\u00e9p\u00e9titions = 5\npour chaque i dans intervalle(0, nbR\u00e9p\u00e9titions) : \n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\nfinpour\n// faire quelque chose apr\u00e8s la boucle\n</code></pre> <ul> <li>La fonction <code>intervalle(0, nbR\u00e9p\u00e9titions)</code> va cr\u00e9er une liste de nombres   entiers dans l\u2019intervalle <code>[0, nbR\u00e9p\u00e9titions)</code> :<ul> <li>les crochets <code>[</code> et <code>]</code> veulent dire inclusif</li> <li>les parenth\u00e8ses <code>(</code> et <code>)</code> veulent dire exclusif</li> <li>donc les nombres dans la liste vont \u00eatre 0, 1, 2, 3 et 4.</li> </ul> </li> <li>\u00c0 la premi\u00e8re it\u00e9ration, <code>i</code> va \u00eatre 0</li> <li>\u00c0 la deuxi\u00e8me it\u00e9ration, <code>i</code> va \u00eatre 1</li> <li>\u00c0 la troisi\u00e8me it\u00e9ration, <code>i</code> va \u00eatre 2</li> <li>\u00c0 la quatri\u00e8me it\u00e9ration, <code>i</code> va \u00eatre 3</li> <li>\u00c0 la cinqui\u00e8me et derni\u00e8re it\u00e9ration, <code>i</code> va \u00eatre 4</li> </ul>"},{"location":"Algorithmes/03_Boucles/#boucle-pour-chaque-avec-liste-ou-tableau","title":"Boucle <code>pour chaque</code> avec liste ou tableau","text":"<pre><code>// faire quelque chose avant la boucle\nnombres = [5, 1, 8, 3]\npour chaque i dans nombres : \n    // faire quelque chose \u00e0 l'int\u00e9rieur de la boucle\nfinpour\n// faire quelque chose apr\u00e8s la boucle\n</code></pre> <ul> <li>\u00c0 la premi\u00e8re it\u00e9ration, <code>i</code> va \u00eatre 5</li> <li>\u00c0 la deuxi\u00e8me it\u00e9ration, <code>i</code> va \u00eatre 1</li> <li>\u00c0 la troisi\u00e8me it\u00e9ration, <code>i</code> va \u00eatre 8</li> <li>\u00c0 la quatri\u00e8me et derni\u00e8re it\u00e9ration, <code>i</code> va \u00eatre 3</li> </ul>"},{"location":"Exercices/01-exercices/","title":"1. Exercices","text":""},{"location":"Exercices/01-exercices/#questions","title":"Questions","text":"<ol> <li>Calculer et afficher la valeur absolue d\u2019un nombre entr\u00e9 par l\u2019utilisateur.</li> <li>D\u00e9terminer si le nombre entier entr\u00e9 par l\u2019utilisateur est pair ou impair.</li> <li>Lire trois nombres et imprimer le plus petit de ces trois nombres.</li> <li>Calculer le salaire total d\u2019un employ\u00e9. On lit en entr\u00e9e les donn\u00e9es concernant son salaire horaire et le nombre    d\u2019heures travaill\u00e9es. Si l\u2019employ\u00e9 a travaill\u00e9 plus de 40 heures, les heures suppl\u00e9mentaires sont    pay\u00e9es \u00e0 1.5 fois le salaire horaire.</li> <li>Lire trois nombres positifs repr\u00e9sentant la longueur des c\u00f4t\u00e9s d\u2019un triangle. Imprimer :<ul> <li>\u201cScal\u00e8ne\u201d si les trois c\u00f4t\u00e9s sont in\u00e9gaux</li> <li>\u201cIsoc\u00e8le\u201d si deux des c\u00f4t\u00e9s sont \u00e9gaux</li> <li>\u201c\u00c9quilat\u00e9ral\u201d si les trois c\u00f4t\u00e9s sont \u00e9gaux</li> </ul> </li> <li>Un professeur vous fournit trois notes calcul\u00e9es sur 100. Calculer la moyenne et imprimer \u00e9chec si la note finale est    inf\u00e9rieure \u00e0 60/100. Dans le cas contraire, imprimer la note obtenue par l\u2019\u00e9tudiant.</li> <li>Lire en entr\u00e9e une note finale d\u2019un cours. Si la note est plus petite que 0, ou si la note est plus grande que 100,    alors afficher \u201cCette note est invalide\u201d et terminer la fonction. Si la note est valide, alors vous devez afficher    une lettre correspondant \u00e0 la note selon les conditions suivantes :<ul> <li>E : plus petite que 60</li> <li>D : de 60 \u00e0 moins que 70</li> <li>C : de 70 \u00e0 moins que 80</li> <li>B : de 80 \u00e0 moins que 90</li> <li>A : 90 ou plus</li> </ul> </li> <li>Vous devez lire un nombre entre 1 et 10 inclusivement.<ul> <li>Si le nombre n\u2019est pas dans cet intervalle, alors afficher \u201cinvalide\u201d.</li> <li>Si le nombre est valide, alors afficher \u201cvalide\u201d.</li> </ul> </li> <li>Vous devez lire un nombre entre 1 et 10 inclusivement.<ul> <li>Si le nombre n\u2019est pas dans cet intervalle, alors afficher \u201cinvalide\u201d et demander le nombre \u00e0 nouveau. Vous   devez vous assurer que le nombre est valide avant de continuer \u00e0 la prochaine \u00e9tape. Il n\u2019y aucune limite sur   le nombre d\u2019essais incorrects.</li> <li>Si le nombre est valide, alors afficher \u201cvalide\u201d.</li> </ul> </li> <li>Vous devez lire un nombre entre 1 et 10 inclusivement.<ul> <li>Si le nombre n\u2019est pas dans cet intervalle, alors afficher \u201cinvalide\u201d et demander le nombre \u00e0 nouveau. Vous   devez vous assurer que le nombre est valide avant de continuer \u00e0 la prochaine \u00e9tape. Il y a une limite de 3 essais   incorrects.</li> <li>Si le nombre maximal d\u2019essais incorrects a \u00e9t\u00e9 atteint, alors afficher \u201cNombre maximal d\u2019essais atteint.\u201d et la   m\u00e9thode doit se terminer.</li> <li>Si le nombre est valide, alors afficher \u201cvalide\u201d.</li> </ul> </li> <li>Vous devez lire un nombre entier et l\u2019afficher \u00e0 l\u2019envers. Par exemple, l\u2019utilisateur saisit <code>123456</code> et le     programme affiche <code>654321</code>. Pour cet exercice, vous ne pouvez pas inverser une cha\u00eene de caract\u00e8res qui repr\u00e9sente     le nombre, vous devez utiliser un <code>int</code> et utiliser la division et le modulo sur ce <code>int</code>.</li> <li>Vous devez lire un nombre entier et afficher un d\u00e9compte \u00e0 partir de ce nombre jusqu\u2019\u00e0 0. Lorsque le d\u00e9compte est     termin\u00e9, afficher \u201cTermin\u00e9 !\u201d \u00e0 la place du nombre 0. Par exemple, si le nombre entr\u00e9 est 5, vous devez afficher     <pre><code>5\n4\n3\n2\n1\nTermin\u00e9 !\n</code></pre></li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/01-22-janvier/","title":"1. Cours du 22 janvier 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/01-22-janvier/#sujets","title":"Sujets","text":"<ol> <li>Plan de cours</li> <li>Qu\u2019est-ce qu\u2019un algorithme</li> <li>Utilisation de PyCharm</li> <li>Premier programme en Python</li> <li>Variables et arithm\u00e9tique</li> <li>Fonction <code>print</code></li> <li>Fonction <code>type</code></li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/01-22-janvier/#livre","title":"Livre","text":"<ul> <li>Chapitre 1</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/02-29-janvier/","title":"2. Cours du 29 janvier 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/02-29-janvier/#sujets","title":"Sujets","text":"<ol> <li>Retour sur la fonction <code>print</code><ul> <li>utilisation de <code>sep=</code> et <code>end=</code></li> </ul> </li> <li>Les f-strings</li> <li>La fonction <code>input</code></li> <li>La fonction <code>int</code></li> <li>La fonction <code>float</code></li> <li>La fonction <code>round</code></li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/02-29-janvier/#livre","title":"Livre","text":"<ul> <li>Chapitre 3, section 3.1 et 3.2</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/03-05-f%C3%A9vrier/","title":"3. Cours du 5 f\u00e9vrier 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/03-05-f%C3%A9vrier/#sujets","title":"Sujets","text":"<ol> <li>Importer des modules<ul> <li><code>import</code></li> </ul> </li> <li>Module <code>random</code><ul> <li><code>random.randint</code></li> <li><code>random.uniform</code></li> <li><code>random.seed</code></li> </ul> </li> <li>Module <code>numpy</code><ul> <li><code>import numpy as np</code></li> <li>constantes : <code>np.pi</code>, <code>np.e</code>, </li> <li>fonctions trigo : <code>np.cos</code>, <code>np.sin</code>. <code>np.tan</code>, <code>np.degrees</code>, <code>np.radians</code></li> <li>fonctions logarithme/exposant : <code>np.log</code>, <code>np.log10</code>, <code>np.exp</code> </li> </ul> </li> <li>Module <code>pyplot</code><ul> <li><code>import matplotlib.pyplot as plt</code></li> <li>fonctions : <code>plt.figure</code>, <code>plt.plot</code>, <code>plt.show</code>, <code>plt.bar</code></li> </ul> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/03-05-f%C3%A9vrier/#livre","title":"Livre","text":"<ul> <li>Chapitre 2</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/04-12-f%C3%A9vrier/","title":"4. Cours du 12 f\u00e9vrier 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/04-12-f%C3%A9vrier/#sujets","title":"Sujets","text":"<ol> <li>D\u00e9finition de fonctions<ul> <li><code>def</code> pour d\u00e9finir une fonction</li> <li>indentation du code de la fonction</li> <li>param\u00e8tres et arguments</li> <li>appels de fonctions</li> <li>variables globales et variables locales</li> </ul> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/04-12-f%C3%A9vrier/#livre","title":"Livre","text":"<ul> <li>Chapitre 3, sections 3.3, 3.4, 3.5</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/05-19-f%C3%A9vrier/","title":"5. Cours du 19 f\u00e9vrier 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/05-19-f%C3%A9vrier/#sujets","title":"Sujets","text":"<ol> <li>Expressions bool\u00e9ennes et op\u00e9rateurs </li> <li>Conditionnelles</li> </ol> <ul> <li><code>if</code></li> <li><code>if...else</code></li> <li><code>if...elif...else</code></li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/05-19-f%C3%A9vrier/#livre","title":"Livre","text":"<ul> <li>Chapitre 4</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/06-26-f%C3%A9vrier/","title":"6. Cours du 26 f\u00e9vrier 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/06-26-f%C3%A9vrier/#premier-examen","title":"Premier examen","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/06-26-f%C3%A9vrier/#deroulement-de-lexamen","title":"D\u00e9roulement de l\u2019examen","text":"<ol> <li>Arrivez dans la classe au plus tard \u00e0 9:00 (id\u00e9alement quelques minutes plus t\u00f4t).</li> <li>Dispersez-vous dans la salle de classe ; laissez une place libre entre chaque \u00e9tudiant si possible.</li> <li>Assurez-vous de mettre votre t\u00e9l\u00e9phone en mode silencieux.</li> <li>Prenez un ordinateur lorsque le professeur le demandera.</li> <li>Connectez-vous sur l\u2019ordinateur, et d\u00e9marrez PyCharm.</li> <li>Cr\u00e9ez un nouveau projet nomm\u00e9 <code>examen1_1234567</code>, en rempla\u00e7ant <code>1234567</code> par votre num\u00e9ro d\u2019\u00e9tudiant.</li> <li>\u00c0 9:15 environ, les questions seront distribu\u00e9es sur papier.</li> <li>Les r\u00e9ponses devront \u00eatre \u00e9crites sous forme de programmes (scripts) Python, dans votre projet nomm\u00e9    <code>examen1_1234567</code>.</li> <li>Vous pouvez utiliser votre livre pendant l\u2019examen. Aucune autre resource (papier, en ligne, IA, ami, \u2026) ne sera    permise.</li> <li>Fin de l\u2019examen \u00e0 11:15, ou 2 heures apr\u00e8s le d\u00e9but de l\u2019examen s\u2019il a d\u00e9but\u00e9 en retard.</li> <li>Pour remettre votre examen, vous devez cr\u00e9er une archive zip qui contient votre dossier de projet nomm\u00e9      <code>examen1_1234567</code> et toutes vos r\u00e9ponses \u00e0 l\u2019int\u00e9rieur (structure similaire \u00e0 la s\u00e9rie d\u2019exercices \u00e0 remettre).</li> <li>Le professeur vous indiquera comment proc\u00e9der pour la remise.</li> <li>Restez silencieux pendant que le professeur s\u2019assure que tous les fichiers ont \u00e9t\u00e9 remis correctement.</li> <li>D\u00e9connectez-vous de votre compte sur l\u2019ordinateur et suivez les instructions pour la remise des ordinateurs.</li> <li>Si vous terminez plus t\u00f4t, informez le professeur que vous voulez remettre l\u2019examen et suivez ses instructions.</li> <li>Vous ne pouvez pas sortir de la classe pendant l\u2019examen, sauf pour une raison majeure.</li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/06-26-f%C3%A9vrier/#preparation","title":"Pr\u00e9paration","text":"<ol> <li>Lire les chapitres du livre correspondants aux notions sujettes \u00e0 l\u2019examen.<ul> <li>Voir le r\u00e9sum\u00e9 des cours des semaines 1 \u00e0 5 pour les d\u00e9tails.</li> </ul> </li> <li>Faire les exercices \u00e0 la fin des chapitres.</li> <li>Lire le r\u00e9sum\u00e9 des notions importantes sur le site du cours.</li> <li>R\u00e9p\u00e9ter les \u00e9tapes de cr\u00e9ation d\u2019un projet, de cr\u00e9ation de fichiers Python et de cr\u00e9ation d\u2019archive zip.</li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/08-19-mars/","title":"8. Cours du 19 mars 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/08-19-mars/#sujets","title":"Sujets","text":"<ol> <li>Retour sur les conditionnelles</li> <li><code>match</code></li> <li>Boucles <code>while</code></li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/08-19-mars/#livre","title":"Livre","text":"<ul> <li>Chapitre 5, sections 5.1, 5.2 et 5.4</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/09-26-mars/","title":"9. Cours du 26 mars 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/09-26-mars/#sujets","title":"Sujets","text":"<ol> <li>Boucles <code>for</code></li> <li>comparaison avec les boucles while</li> <li>fonction <code>range</code> </li> <li>fonction <code>np.arange</code> </li> <li>fonction <code>np.linspace</code> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/09-26-mars/#livre","title":"Livre","text":"<ul> <li>Chapitre 6</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Cours/10-9-avril/","title":"10. Cours du 9 avril 2025","text":""},{"location":"R%C3%A9sum%C3%A9/Cours/10-9-avril/#sujets","title":"Sujets","text":"<ol> <li>Boucles imbriqu\u00e9es</li> <li>Autres structures imbriqu\u00e9es</li> <li>Fichiers</li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Cours/10-9-avril/#livre","title":"Livre","text":"<ul> <li>Chapitre 7</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Examen/01-exemples_derniers_cours/","title":"Exemples derniers cours","text":""},{"location":"R%C3%A9sum%C3%A9/Examen/01-exemples_derniers_cours/#fichiers-et-listes","title":"Fichiers et listes","text":"<p>fichiers_listes.zip</p> <p>Fichiers individuels :</p> <ul> <li>chaines.py</li> <li>donnees.csv</li> <li>donnees2.csv</li> <li>donnees3.csv</li> <li>donnees4.csv</li> <li>donnees5.csv</li> <li>ecrire.py</li> <li>ecrire2.py</li> <li>ecrire_donnees.py</li> <li>ecrire_donnees2.py</li> <li>ecrire_donnees3.py</li> <li>examen.py</li> <li>graphique.py</li> <li>graphique2.py</li> <li>labo.py</li> <li>labo1.csv</li> <li>labo2.csv</li> <li>labo3.csv</li> <li>lire.py</li> <li>lire2.py</li> <li>lire_donnees.py</li> <li>listes.py</li> <li>listes2.py</li> <li>nombres.txt</li> <li>nombres2.txt</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Examen/02-exercices/","title":"Exercices","text":""},{"location":"R%C3%A9sum%C3%A9/Examen/02-exercices/#exercice-1-calcul-et-trace-de-racines-carrees","title":"Exercice 1 : Calcul et trac\u00e9 de racines carr\u00e9es","text":"<p>Un fichier <code>valeurs.txt</code> contient une liste de nombres entiers (un nombre par ligne). Lis ces nombres, calcule leur racine carr\u00e9e, puis trace le graphique des valeurs originales en fonction de leur racine carr\u00e9e.</p> <p>\u00c9tapes sugg\u00e9r\u00e9es :</p> <ol> <li>Lire les nombres depuis le fichier.</li> <li>Calculer la racine carr\u00e9e de chaque nombre (utilise <code>np.sqrt</code>).</li> <li>Tracer les points (nombres originaux, racines carr\u00e9es) avec Matplotlib.</li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Examen/02-exercices/#exercice-2-temperatures-et-conversion","title":"Exercice 2 : Temp\u00e9ratures et conversion","text":"<p>Le fichier <code>temperatures.txt</code> contient des temp\u00e9ratures en Celsius (un nombre par ligne). Lis ces temp\u00e9ratures, convertis-les en Fahrenheit, puis trace la courbe des temp\u00e9ratures Celsius en fonction des temp\u00e9ratures Fahrenheit.</p> <p>Formule de conversion : $$ F = C \\times \\frac{9}{5} + 32 $$</p>"},{"location":"R%C3%A9sum%C3%A9/Examen/02-exercices/#exercice-3-trace-dune-fonction-trigonometrique","title":"Exercice 3 : Trac\u00e9 d\u2019une fonction trigonom\u00e9trique","text":"<p>Le fichier <code>angles.txt</code> contient des valeurs d\u2019angles en degr\u00e9s (un angle par ligne). Lis ces angles, calcule le sinus de chaque angle (pense \u00e0 convertir en radians avec <code>np.radians</code>), puis trace la courbe des angles (en degr\u00e9s) en fonction de leur sinus.</p>"},{"location":"R%C3%A9sum%C3%A9/Examen/02-exercices/#exercice-4-moyenne-mobile","title":"Exercice 4 : Moyenne mobile","text":"<p>Le fichier <code>donnees.txt</code> contient une s\u00e9rie de nombres (un par ligne). Lis ces nombres et calcule la moyenne mobile sur 3 valeurs (chaque point est la moyenne de lui-m\u00eame et des deux pr\u00e9c\u00e9dents, \u00e0 partir du 3e \u00e9l\u00e9ment). Trace la s\u00e9rie originale et la s\u00e9rie des moyennes mobiles sur le m\u00eame graphique (utilise deux courbes de couleurs diff\u00e9rentes).</p>"},{"location":"R%C3%A9sum%C3%A9/Examen/02-exercices/#exercice-5-trace-de-plusieurs-jeux-de-donnees","title":"Exercice 5 : Trac\u00e9 de plusieurs jeux de donn\u00e9es","text":"<p>Un fichier <code>experiment.csv</code> contient 3 lignes avec des valeurs num\u00e9riques s\u00e9par\u00e9es par des virgules. \u00c9crire un programme qui :</p> <ol> <li>Lit les 3 lignes</li> <li>Convertit chaque ligne en liste de floats</li> <li>Trace les trois courbes sur le m\u00eame graphique avec des couleurs diff\u00e9rentes (rouge, vert, bleu), en utilisant la    position des nombres lus (les index dans les listes) comme valeur de x et les nombres lus comme valeurs de y.</li> <li>Utilise des marqueurs carr\u00e9s de taille 8 pour chaque point</li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Examen/03-exercices/","title":"Solutions","text":""},{"location":"R%C3%A9sum%C3%A9/Examen/03-exercices/#exercice-1-calcul-et-trace-de-racines-carrees","title":"Exercice 1 : Calcul et trac\u00e9 de racines carr\u00e9es","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Lecture des nombres depuis le fichier\nwith open('valeurs.txt', 'r') as f:\n    nombres = [int(ligne.strip()) for ligne in f.readlines()]\n\n# Calcul des racines carr\u00e9es\nracines = np.sqrt(nombres)\n\n# Trac\u00e9 du graphique\nplt.figure(figsize=(6, 4))\nplt.plot(nombres, racines, 'bo-')\nplt.title('Exercice 1 : Racines carr\u00e9es')\nplt.xlabel('Valeurs originales')\nplt.ylabel('Racines carr\u00e9es')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Examen/03-exercices/#exercice-2-temperatures-et-conversion","title":"Exercice 2 : Temp\u00e9ratures et conversion","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Lecture des temp\u00e9ratures en Celsius\nwith open('temperatures.txt', 'r') as f:\n    celsius = [float(ligne.strip()) for ligne in f.readlines()]\n\n# Conversion en Fahrenheit\nfahrenheit = [c * 9/5 + 32 for c in celsius]\n\n# Trac\u00e9 du graphique\nplt.figure(figsize=(6, 4))\nplt.plot(celsius, fahrenheit, 'r*-')\nplt.title('Exercice 2 : Temp\u00e9ratures Celsius vs Fahrenheit')\nplt.xlabel('Temp\u00e9rature (\u00b0C)')\nplt.ylabel('Temp\u00e9rature (\u00b0F)')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Examen/03-exercices/#exercice-3-trace-dune-fonction-trigonometrique","title":"Exercice 3 : Trac\u00e9 d\u2019une fonction trigonom\u00e9trique","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Lecture des angles en degr\u00e9s\nwith open('angles.txt', 'r') as f:\n    angles_deg = [float(ligne.strip()) for ligne in f.readlines()]\n\n# Conversion en radians et calcul du sinus\nangles_rad = np.radians(angles_deg)\nsinus = np.sin(angles_rad)\n\n# Trac\u00e9 du graphique\nplt.figure(figsize=(6, 4))\nplt.plot(angles_deg, sinus, 'g^-')\nplt.title('Exercice 3 : Sinus des angles')\nplt.xlabel('Angle (degr\u00e9s)')\nplt.ylabel('Sinus')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Examen/03-exercices/#exercice-4-moyenne-mobile","title":"Exercice 4 : Moyenne mobile","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Lecture des donn\u00e9es\nwith open('donnees.txt', 'r') as f:\n    donnees = [float(ligne.strip()) for ligne in f.readlines()]\n\n# Calcul de la moyenne mobile sur 3 valeurs\nmoyennes_mobiles = []\nfor i in range(2, len(donnees)):\n    moyenne = sum(donnees[i-2:i+1]) / 3\n    moyennes_mobiles.append(moyenne)\n\n# Trac\u00e9 du graphique\nplt.figure(figsize=(6, 4))\nplt.plot(donnees, 'b-', label='Donn\u00e9es originales')\nplt.plot(range(2, len(donnees)), moyennes_mobiles, 'r-', label='Moyenne mobile (3)')\nplt.title('Exercice 4 : Moyenne mobile sur 3 valeurs')\nplt.xlabel('Index')\nplt.ylabel('Valeur')\nplt.legend()\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Examen/03-exercices/#exercice-5-histogramme-de-valeurs","title":"Exercice 5 : Histogramme de valeurs","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Lecture des mesures\nwith open('mesures.txt', 'r') as f:\n    mesures = [float(ligne.strip()) for ligne in f.readlines()]\n\n# Cr\u00e9ation de l'histogramme\nplt.figure(figsize=(6, 4))\nplt.hist(mesures, bins=10, color='purple', edgecolor='black')\nplt.title('Exercice 5 : Histogramme des mesures')\nplt.xlabel('Valeur')\nplt.ylabel('Fr\u00e9quence')\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Examen/03-exercices/#exercice-6-trace-de-plusieurs-jeux-de-donnees","title":"Exercice 6 : Trac\u00e9 de plusieurs jeux de donn\u00e9es","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Lecture du fichier CSV\nwith open('experiment.csv', 'r') as f:\n    lignes = f.readlines()\n\n# Conversion des lignes en listes de floats\ndata = []\nfor ligne in lignes:\n    valeurs = [float(x) for x in ligne.strip().split(',')]\n    data.append(valeurs)\n\n# Trac\u00e9 des trois courbes\nplt.figure(figsize=(6, 4))\ncouleurs = ['r', 'g', 'b']\nfor i, serie in enumerate(data):\n    x = list(range(len(serie)))\n    plt.plot(x, serie, marker='s', markersize=8, color=couleurs[i], label=f'S\u00e9rie {i+1}')\n\nplt.title('Exercice 6 : Plusieurs jeux de donn\u00e9es')\nplt.xlabel('Index')\nplt.ylabel('Valeur')\nplt.legend()\nplt.grid(True)\nplt.show()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/","title":"1. Affichage sur la sortie standard","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#la-sortie-standard","title":"La sortie standard","text":"<p>La sortie standard (<code>stdout</code>) est le flux de sortie par d\u00e9faut d\u2019un programme informatique[1][3]. C\u2019est le canal par lequel un programme affiche sa sortie normale \u00e0 l\u2019utilisateur ou \u00e0 un autre programme[1].</p> <p>Voici les principales caract\u00e9ristiques de stdout :</p> <ol> <li>Il s\u2019agit d\u2019un flux de donn\u00e9es connect\u00e9 par d\u00e9faut au terminal ou \u00e0 la console o\u00f9 le programme a \u00e9t\u00e9 lanc\u00e9[1][3].</li> <li>Son descripteur de fichier est 1[3].</li> <li>Il est utilis\u00e9 pour afficher les r\u00e9sultats normaux, les messages d\u2019information et les donn\u00e9es produites par le    programme[1][5].</li> <li>En langage C, stdout est repr\u00e9sent\u00e9 par le pointeur FILE* stdout d\u00e9fini dans [3]. <li>Il peut \u00eatre redirig\u00e9 vers un fichier ou un autre programme, permettant ainsi de capturer ou de traiter la sortie du    programme[3][5].</li> <li>Par convention, stdout est utilis\u00e9 pour la sortie normale, tandis que stderr (descripteur 2) est utilis\u00e9 pour les    messages d\u2019erreur et de diagnostic[1][10].</li> <p>La sortie standard permet aux programmes de communiquer leurs r\u00e9sultats de mani\u00e8re standardis\u00e9e, facilitant ainsi leur utilisation dans des scripts ou leur int\u00e9gration avec d\u2019autres outils[5].</p> Citations <ul> <li>[1] https://www.lenovo.com/fr/fr/glossary/stdout/</li> <li>[2] https://www.ukonline.be/cours/java/apprendre-java/chapitre4-9</li> <li>[3] https://fr.wikipedia.org/wiki/Flux_standard</li> <li>[4] https://fr.wikibooks.org/wiki/Programmation_C/Entr%C3%A9es/sorties</li> <li>[5] https://python.developpez.com/cours/DiveIntoPython/php/frdiveintopython/scripts_and_streams/stdin_stdout_stderr.php</li> <li>[6] https://canada.lenovo.com/fr/ca/en/glossary/stdin/</li> <li>[7] https://learn.microsoft.com/fr-fr/cpp/c-runtime-library/stdin-stdout-stderr?view=msvc-170</li> <li>[8] http://www.iro.umontreal.ca/~dift1166/A08/notesDeCours/intro_es.pdf</li> <li>[9] https://librecours.net/modules/picasoft/init/linux-ligne-commande-api/solweb/co/flux.html</li> <li>[10] https://www.reddit.com/r/bash/comments/w522np/understanding_stdin_stdout_and_stderr/?tl=fr</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#la-fonction-print","title":"La fonction <code>print()</code>","text":"<p>La fonction <code>print()</code> est utilis\u00e9e pour afficher du texte ou des r\u00e9sultats \u00e0 l\u2019\u00e9cran. Voici un guide d\u00e9taill\u00e9 pour comprendre son fonctionnement avec plusieurs arguments, des s\u00e9parateurs personnalis\u00e9s et des fins de ligne diff\u00e9rentes.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#1-imprimer-plusieurs-arguments","title":"1. Imprimer plusieurs arguments","text":"<p>Vous pouvez passer plusieurs objets \u00e0 <code>print()</code>, s\u00e9par\u00e9s par des virgules. Par d\u00e9faut, Python ins\u00e8re un espace entre eux.</p> <pre><code>print(\"Bonjour\", \"tout\", \"le\", \"monde\")\n# Sortie : Bonjour tout le monde\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#2-utiliser-un-separateur-personnalise-sep","title":"2. Utiliser un s\u00e9parateur personnalis\u00e9 (<code>sep</code>)","text":"<p>Le param\u00e8tre <code>sep</code> permet de d\u00e9finir un s\u00e9parateur sp\u00e9cifique entre les arguments.</p> <pre><code>print(\"Bonjour\", \"tout\", \"le\", \"monde\", sep=\"-\")\n# Sortie : Bonjour-tout-le-monde\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#3-modifier-la-fin-de-ligne-end","title":"3. Modifier la fin de ligne (<code>end</code>)","text":"<p>Par d\u00e9faut, <code>print()</code> ajoute un saut de ligne (<code>\\n</code>). Vous pouvez le changer avec le param\u00e8tre <code>end</code>.</p> <pre><code>print(\"Bonjour\", end=\" \")\nprint(\"tout le monde\")\n# Sortie : Bonjour tout le monde (sur une seule ligne)\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#exemple-combine","title":"Exemple combin\u00e9","text":"<p>Voici un exemple combinant les deux param\u00e8tres :</p> <pre><code>print(\"Python\", \"est\", \"g\u00e9nial\", sep=\"*\", end=\"!\\n\")\n# Sortie : Python*est*g\u00e9nial!\n</code></pre> <p>Ces fonctionnalit\u00e9s rendent la fonction <code>print()</code> tr\u00e8s flexible pour formater vos sorties.</p> Citations <ul> <li>[1] https://www.ionos.fr/digitalguide/sites-internet/developpement-web/python-print/</li> <li>[2] https://deeplearning.lipingyang.org/2017/03/11/print-multiple-arguments-in-python3/</li> <li>[3] https://blog.alphorm.com/comprendre-et-manipuler-les-chaines-de-caracteres-en-python</li> <li>[4] https://python.sdv.u-paris.fr/03_affichage/</li> <li>[5] https://www.geeksforgeeks.org/how-to-print-multiple-arguments-in-python/</li> <li>[6] https://python.developpez.com/tutoriels/python-basic-par-exemple/?page=les-fonctions</li> <li>[7] https://www.w3schools.com/python/ref_func_print.asp</li> <li>[8] https://www.geeksforgeeks.org/how-to-pass-multiple-arguments-to-function/</li> <li>[9] https://www.geeksforgeeks.org/python-output-using-print-function/</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#les-f-strings-en-python","title":"Les f-strings en Python","text":"<p>Les f-strings (cha\u00eenes litt\u00e9rales format\u00e9es) sont une fonctionnalit\u00e9 introduite dans Python 3.6 pour simplifier le formatage de cha\u00eenes. Elles permettent d\u2019ins\u00e9rer des variables, des expressions ou des calculs directement dans une cha\u00eene de caract\u00e8res, rendant le code plus lisible et concis.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#1-syntaxe-de-base","title":"1. Syntaxe de base","text":"<p>Pour cr\u00e9er une f-string, ajoutez la lettre <code>f</code> avant les guillemets de la cha\u00eene. Utilisez des accolades <code>{}</code> pour ins\u00e9rer des variables ou expressions.</p> <pre><code>nom = \"Alice\"\nage = 30\nprint(f\"Bonjour, je m'appelle {nom} et j'ai {age} ans.\")\n# Sortie : Bonjour, je m'appelle Alice et j'ai 30 ans.\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#2-inserer-des-expressions","title":"2. Ins\u00e9rer des expressions","text":"<p>Les f-strings permettent d\u2019\u00e9valuer des expressions directement dans les accolades.</p> <pre><code>a = 5\nb = 3\nprint(f\"La somme de {a} et {b} est {a + b}.\")\n# Sortie : La somme de 5 et 3 est 8.\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#3-formatage-avance","title":"3. Formatage avanc\u00e9","text":"<p>Vous pouvez appliquer un formatage pr\u00e9cis \u00e0 l\u2019int\u00e9rieur des accolades en utilisant des sp\u00e9cifications de format.</p> <ul> <li>Nombres flottants : Limiter le nombre de d\u00e9cimales.</li> </ul> <pre><code>pi = 3.14159\nprint(f\"La valeur de \u03c0 est approximativement {pi:.2f}.\")\n# Sortie : La valeur de \u03c0 est approximativement 3.14.\n</code></pre> <ul> <li>Alignement et largeur :</li> </ul> <pre><code>texte = \"Python\"\nprint(f\"{texte:&lt;10}\")  # Align\u00e9 \u00e0 gauche\nprint(f\"{texte:&gt;10}\")  # Align\u00e9 \u00e0 droite\nprint(f\"{texte:^10}\")  # Centr\u00e9\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#4-appels-de-fonctions","title":"4. Appels de fonctions","text":"<p>Les f-strings peuvent inclure des appels de fonctions ou des m\u00e9thodes.</p> <pre><code>nom = \"alice\"\nprint(f\"Nom en majuscules : {nom.upper()}\")\n# Sortie : Nom en majuscules : ALICE\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/01-affichage/#5-exemple-combine","title":"5. Exemple combin\u00e9","text":"<p>Voici un exemple combinant plusieurs fonctionnalit\u00e9s :</p> <pre><code>nom = \"Bob\"\nmontant = 1234.56789\nprint(f\"Bonjour {nom}, votre solde est de {montant:.2f} \u20ac.\")\n# Sortie : Bonjour Bob, votre solde est de 1234.57 \u20ac.\n</code></pre> <p>Les f-strings sont rapides, lisibles et flexibles, ce qui en fait un outil essentiel pour travailler avec des  cha\u00eenes en Python.</p> Citations <ul> <li>[1] https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/</li> <li>[2] http://cissandbox.bentley.edu/sandbox/wp-content/uploads/2022-02-10-Documentation-on-f-strings-Updated.pdf</li> <li>[3] https://realpython.com/python-f-strings/</li> <li>[4] https://www.freecodecamp.org/news/python-f-strings-tutorial-how-to-use-f-strings-for-string-formatting/</li> <li>[5] https://www.ionos.fr/digitalguide/sites-internet/developpement-web/python-f-strings/</li> <li>[6] https://www.docstring.fr/glossaire/f-string/</li> <li>[7] https://he-arc.github.io/livre-python/fstrings/index.html</li> <li>[8] https://www.w3schools.com/python/python_string_formatting.asp</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/","title":"2. Lire des donn\u00e9es sur l\u2019entr\u00e9e standard","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#la-fonction-input-et-la-conversion-en-int-ou-float","title":"La fonction <code>input()</code> et la conversion en <code>int</code> ou <code>float</code>","text":"<p>La fonction <code>input()</code> permet de demander une saisie \u00e0 l\u2019utilisateur. Par d\u00e9faut, elle retourne toujours une cha\u00eene de caract\u00e8res (<code>str</code>). Si vous souhaitez utiliser cette entr\u00e9e comme un nombre, il faut la convertir en un type num\u00e9rique comme <code>int</code> ou <code>float</code>.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#1-utilisation-de-base-de-input","title":"1. Utilisation de base de <code>input()</code>","text":"<pre><code>nom = input(\"Quel est votre nom ? \")\nprint(f\"Bonjour, {nom} !\")\n</code></pre> <ul> <li>Explication : Le texte entre parenth\u00e8ses est affich\u00e9 comme un message pour guider l\u2019utilisateur.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#2-conversion-en-int-ou-float","title":"2. Conversion en <code>int</code> ou <code>float</code>","text":"<p>Pour traiter des nombres, utilisez les fonctions de conversion <code>int()</code> ou <code>float()</code>.</p> <pre><code>age = input(\"Quel \u00e2ge avez-vous ? \")\nage = int(age)  # Conversion en entier\nprint(f\"Vous avez {age} ans.\")\n</code></pre> <pre><code>poids = input(\"Quel est votre poids (en kg) ? \")\npoids = float(poids)  # Conversion en nombre d\u00e9cimal\nprint(f\"Votre poids est {poids} kg.\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#3-risque-derreurs-lors-de-la-conversion","title":"3. Risque d\u2019erreurs lors de la conversion","text":"<p>Si l\u2019utilisateur saisit une valeur non convertible (par exemple, du texte au lieu d\u2019un nombre), Python g\u00e9n\u00e8re une erreur de type <code>ValueError</code>.</p> <p>Exemple d\u2019erreur :</p> <pre><code>valeur = input(\"Entrez un nombre : \")\nvaleur = int(valeur)  # Erreur si l'entr\u00e9e n'est pas un nombre\n# Si l'utilisateur tape \"abc\", l'erreur sera :\n# ValueError: invalid literal for int() with base 10: 'abc'\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#points-importants-a-retenir","title":"Points importants \u00e0 retenir","text":"<ul> <li>La conversion doit \u00eatre utilis\u00e9e uniquement si l\u2019entr\u00e9e est valide.</li> <li>Sans gestion d\u2019erreurs (<code>try/except</code>), le programme s\u2019arr\u00eatera en cas de probl\u00e8me.</li> </ul> Citations <ul> <li>[1] https://www.w3schools.com/python/ref_func_input.asp</li> <li>[2] https://labex.io/questions/how-to-handle-type-conversion-errors-in-python-290726</li> <li>[3] https://www.docstring.fr/blog/interagir-avec-un-utilisateur-grace-la-fonction-in/</li> <li>[4] https://llego.dev/posts/handling-errors-exceptions-type-conversion-fails-python/</li> <li>[5] https://cscircles.cemc.uwaterloo.ca/5-fr/</li> <li>[6] https://docs.python.org/fr/3/tutorial/errors.html</li> <li>[7] https://apprendre.modulo-info.ch/prog1/questionner.html</li> <li>[8] https://www.workdispo.com/blog/input-python</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#differences-entre-int-round-et-le-formatage-2f-dans-les-f-strings","title":"Diff\u00e9rences entre <code>int</code>, <code>round</code> et le formatage <code>.2f</code> dans les f-strings","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#1-fonction-int","title":"1. Fonction <code>int</code>","text":"<ul> <li>La fonction <code>int()</code> tronque toujours la partie d\u00e9cimale d\u2019un nombre flottant, sans arrondi.</li> <li>Elle convertit un flottant en entier en supprimant tout ce qui suit la virgule.</li> </ul> <p>Exemple :</p> <pre><code>x = 5.76543\nprint(int(x))  # Sortie : 5\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#2-fonction-round","title":"2. Fonction <code>round</code>","text":"<ul> <li>La fonction <code>round()</code> arrondit un nombre au plus proche entier ou \u00e0 un certain nombre de d\u00e9cimales.</li> <li>Par d\u00e9faut, elle retourne un entier si aucun argument pour les d\u00e9cimales n\u2019est fourni.</li> <li>Elle utilise l\u2019arrondi \u201cpair\u201d (ou \u201cround half to even\u201d) : si le chiffre apr\u00e8s la virgule est exactement 0.5, il   choisit l\u2019entier pair le plus proche.</li> </ul> <p>Exemple :</p> <pre><code>x = 4.5\ny = 5.5\nprint(round(x))  # Sortie : 4 (arrondi vers l'entier pair)\nprint(round(y))  # Sortie : 6 (arrondi vers l'entier pair)\n</code></pre> <p>Avec pr\u00e9cision :</p> <pre><code>z = 5.76543\nprint(round(z, 2))  # Sortie : 5.77 (arrondi \u00e0 deux d\u00e9cimales)\n</code></pre> <p>Attention</p> <p>Il est important de noter que <code>round</code> peut parfois donner des r\u00e9sultats surprenants en raison des limitations de la  repr\u00e9sentation en virgule flottante. Par exemple : <pre><code>print(round(2.675, 2))  # R\u00e9sultat : 2.67 (au lieu de 2.68)\n</code></pre></p>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#3-formatage-avec-2f-dans-les-f-strings","title":"3. Formatage avec <code>.2f</code> dans les f-strings","text":"<ul> <li>Le formatage <code>.2f</code> dans une f-string ne modifie pas la valeur r\u00e9elle du nombre, mais contr\u00f4le uniquement son affichage   en arrondissant visuellement \u00e0 deux d\u00e9cimales.</li> <li>Contrairement \u00e0 <code>round()</code>, il ne retourne pas un nouveau nombre, mais une cha\u00eene format\u00e9e.</li> </ul> <p>Exemple :</p> <pre><code>x = 5.76543\nprint(f\"{x:.2f}\")  # Sortie : 5.77 (affichage arrondi \u00e0 deux d\u00e9cimales)\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#differences-entre-round-et-2f","title":"Diff\u00e9rences entre <code>round</code> et <code>.2f</code>","text":"Fonctionnalit\u00e9 <code>round()</code> <code>.2f</code> dans f-strings Type de retour Nombre (<code>int</code> ou <code>float</code>) Cha\u00eene de caract\u00e8res Modification r\u00e9elle ? Oui Non (affichage uniquement) Usage principal Calculs Formatage visuel"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#resume-des-differences-principales","title":"R\u00e9sum\u00e9 des diff\u00e9rences principales","text":"<ul> <li><code>int()</code> tronque sans arrondir.</li> <li><code>round()</code> modifie r\u00e9ellement la valeur en arrondissant.</li> <li><code>.2f</code> est utilis\u00e9 pour afficher un nombre avec un format visuel pr\u00e9cis sans changer sa valeur r\u00e9elle.</li> </ul> Citations <ul> <li>[1] https://www.w3schools.com/python/ref_func_round.asp</li> <li>[2] https://geekflare.com/fr/round-numbers-in-python-with-examples/</li> <li>[3] https://discuss.python.org/t/built-in-types-int-round-or-truncate-please-elaborate/24840</li> <li>[4] https://waytolearnx.com/2020/07/fonction-round-python.html</li> <li>[5] https://realpython.com/python-rounding/</li> <li>[6] https://www.guru99.com/fr/round-function-python.html</li> <li>[7] https://www.geeksforgeeks.org/round-function-python/</li> <li>[8] https://koor.fr/Python/API/python/builtins/round.wp</li> <li>[9] https://stackoverflow.com/questions/43660910/python-difference-between-round-and-int</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/02-entr%C3%A9es/#est-ce-que-les-f-strings-utilisent-la-regle-round-half-to-even-comme-la-fonction-round","title":"Est-ce que les f-strings utilisent la r\u00e8gle \u201cround half to even\u201d comme la fonction round ?","text":"<p>Non, les f-strings en Python n\u2019utilisent pas la r\u00e8gle \u201cround half to even\u201d comme la fonction <code>round()</code>.</p> <p>Les f-strings avec un format comme <code>.2f</code> effectuent un arrondi visuel bas\u00e9 sur une r\u00e8gle d\u2019arrondi classique (round half up), o\u00f9 les valeurs \u00e0 exactement 0.5 apr\u00e8s le dernier chiffre significatif sont arrondies vers le haut, ind\u00e9pendamment de la parit\u00e9 du chiffre pr\u00e9c\u00e9dent. En revanche, la fonction <code>round()</code> suit la r\u00e8gle \u201cround half to even\u201d (ou \u201cbanker\u2019s rounding\u201d), qui arrondit les valeurs \u00e0 0.5 vers l\u2019entier pair le plus proche[1][3][5].</p> <p>Exemple :</p> <pre><code>x = 2.5\nprint(f\"{x:.0f}\")  # Sortie : 3 (arrondi classique)\nprint(round(x))  # Sortie : 2 (arrondi pair)\n</code></pre> Citations <ul> <li>[1] https://sparkbyexamples.com/python/python-limit-floats-to-two-decimal-points/</li> <li>[2] https://rowannicholls.github.io/python/data/rounding_off.html</li> <li>[3] https://realpython.com/python-rounding/</li> <li>[4] https://en.wikipedia.org/wiki/Nearest_integer_function</li> <li>[5] https://github.com/rust-lang/rust/issues/70336</li> <li>[6] https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior</li> <li>[7] https://gist.ly/youtube-summarizer/mastering-pythons-round-function-a-comprehensive-guide</li> <li>[8] https://schneide.blog/tag/python/</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/","title":"3. Importation de modules","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/#exemple-avec-random","title":"Exemple avec <code>random</code>","text":"<p>En Python, les modules sont des ensembles de fonctions et de variables pr\u00eates \u00e0 l\u2019emploi. Pour utiliser un module, il faut d\u2019abord l\u2019importer dans votre programme. Le module <code>random</code> est un exemple courant utilis\u00e9 pour g\u00e9n\u00e9rer des nombres al\u00e9atoires.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/#1-importer-le-module-random","title":"1. Importer le module <code>random</code>","text":"<p>Pour importer le module, utilisez la commande suivante :</p> <pre><code>import random\n</code></pre> <p>Cela donne acc\u00e8s \u00e0 toutes les fonctions du module <code>random</code>.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/#2-la-fonction-randint","title":"2. La fonction <code>randint</code>","text":"<p>La fonction <code>randint(a, b)</code> g\u00e9n\u00e8re un entier al\u00e9atoire compris entre les bornes incluses \\(a\\) et \\(b\\).</p> <p>Syntaxe :</p> <pre><code>random.randint(a, b)\n</code></pre> <ul> <li><code>a</code> : borne inf\u00e9rieure (incluse).</li> <li><code>b</code> : borne sup\u00e9rieure (incluse).</li> </ul> <p>Exemple :</p> <pre><code>import random\n\nnombre = random.randint(1, 10)\nprint(f\"Nombre entier al\u00e9atoire entre 1 et 10 : {nombre}\")\n</code></pre> <ul> <li>Si vous ex\u00e9cutez ce code plusieurs fois, il produira des entiers comme <code>3</code>, <code>7</code>, ou <code>10</code>.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/#3-la-fonction-uniform","title":"3. La fonction <code>uniform</code>","text":"<p>La fonction <code>uniform(a, b)</code> g\u00e9n\u00e8re un nombre flottant al\u00e9atoire compris entre \\(a\\) et \\(b\\), avec \\(a\\) inclus et \\(b\\) potentiellement inclus.</p> <p>Syntaxe :</p> <pre><code>random.uniform(a, b)\n</code></pre> <ul> <li><code>a</code> : borne inf\u00e9rieure.</li> <li><code>b</code> : borne sup\u00e9rieure.</li> </ul> <p>Exemple :</p> <pre><code>import random\n\nnombre_flottant = random.uniform(1.5, 5.5)\nprint(f\"Nombre flottant al\u00e9atoire entre 1.5 et 5.5 : {nombre_flottant}\")\n</code></pre> <ul> <li>Ce code peut produire des valeurs comme <code>2.34</code>, <code>4.78</code>, ou <code>5.5</code>.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/#resume-des-differences-entre-randint-et-uniform","title":"R\u00e9sum\u00e9 des diff\u00e9rences entre <code>randint</code> et <code>uniform</code>","text":"Fonction Type de valeur g\u00e9n\u00e9r\u00e9e Bornes incluses ? <code>randint(a, b)</code> Entier Oui <code>uniform(a, b)</code> Flottant Oui pour \\(a\\), \\(b\\) potentiellement <p>Ces fonctions sont tr\u00e8s utiles pour simuler des \u00e9v\u00e9nements al\u00e9atoires ou g\u00e9n\u00e9rer des donn\u00e9es de test dans vos programmes Python.</p> Citations <ul> <li>[1] https://www.cs.swarthmore.edu/~adanner/cs21/f09/randomlib.php</li> <li>[2] https://www.pythonforbeginners.com/random/how-to-use-the-random-module-in-python</li> <li>[3] https://www.geeksforgeeks.org/python-random-module/</li> <li>[4] https://docs.python.org/zh-tw/3/library/random.html</li> <li>[5] https://www.w3schools.com/python/ref_random_random.asp</li> <li>[6] https://www.ionos.fr/digitalguide/sites-internet/developpement-web/python-randint/</li> <li>[7] https://stackoverflow.com/questions/63246858/how-do-i-get-the-random-module-to-work-did-i-forget-to-import-something-or-d</li> <li>[8] https://python-forum.io/thread-16247.html</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/#potentiellement-incluse","title":"Potentiellement incluse","text":"<p>La borne sup\u00e9rieure \\(b\\) est dite \u201cpotentiellement incluse\u201d dans la fonction <code>random.uniform(a, b)</code> en raison des limitations de l\u2019arithm\u00e9tique en virgule flottante utilis\u00e9e par Python. Voici une explication d\u00e9taill\u00e9e :</p> <ol> <li> <p>Comment fonctionne <code>random.uniform</code> :    La fonction g\u00e9n\u00e8re un nombre al\u00e9atoire en utilisant la formule suivante :    \\(a + (b - a) \\times \\text{random()}\\),    o\u00f9 <code>random()</code> produit un nombre flottant dans l\u2019intervalle \\([0, 1)\\). En th\u00e9orie, cela signifie que le r\u00e9sultat    devrait \u00eatre dans l\u2019intervalle \\([a, b)\\), \\(b\\) \u00e9tant exclu.</p> </li> <li> <p>Effet des arrondis flottants :    En pratique, \u00e0 cause des impr\u00e9cisions li\u00e9es au stockage des nombres en virgule flottante, il est possible que le    calcul produise une valeur exactement \u00e9gale \u00e0 \\(b\\). Cela d\u00e9pend de la pr\u00e9cision des calculs effectu\u00e9s par le    processeur et de la repr\u00e9sentation interne des nombres.</p> </li> <li> <p>Cons\u00e9quences :</p> <ul> <li>Dans la plupart des cas, \\(b\\) sera exclu.</li> <li>Cependant, il est rare mais possible que \\(b\\) soit inclus en raison d\u2019arrondis sp\u00e9cifiques.</li> </ul> </li> </ol> <p>Exemple :</p> <pre><code>import random\n\n# Exemple o\u00f9 b pourrait \u00eatre inclus\nfor _ in range(100000):\n    x = random.uniform(0, 1)\n    if x == 1:  # V\u00e9rifie si b est inclus\n        print(\"La borne sup\u00e9rieure 1 a \u00e9t\u00e9 incluse.\")\n        break\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/03-random/#resume","title":"R\u00e9sum\u00e9","text":"<ul> <li>La borne \\(b\\) est potentiellement incluse dans <code>random.uniform(a, b)</code> \u00e0 cause des arrondis flottants.</li> <li>Cela n\u2019a g\u00e9n\u00e9ralement aucune incidence pratique, car les nombres g\u00e9n\u00e9r\u00e9s sont continus et il y a une infinit\u00e9 de   valeurs possibles entre \\(a\\) et \\(b\\).</li> </ul> Citations <ul> <li>[1] https://www.w3schools.com/python/ref_random_uniform.asp</li> <li>[2] https://stackoverflow.com/questions/78054851/when-using-random-uniforma-b-is-b-inclusive-or-exclusive</li> <li>[3] https://numpy.org/doc/2.1/reference/random/generated/numpy.random.uniform.html</li> <li>[4] https://zestedesavoir.com/tutoriels/2514/un-zeste-de-python/8-bibliotheque-standard/2-random/</li> <li>[5] https://docs.python.org/fr/3.13/library/random.html</li> <li>[6] https://scicomp.stackexchange.com/questions/29959/uniform-dots-distribution-in-a-sphere</li> <li>[7] https://fiches-isn.readthedocs.io/fr/latest/random.html</li> <li>[8] https://openclassrooms.com/fr/courses/6204541-initiez-vous-a-python-pour-lanalyse-de-donnees/6252451-manipulez-des-nombres-aleatoires-avec-le-module-random</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/","title":"4. Module <code>numpy</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/#introduction-a-numpy-et-ses-fonctions-mathematiques","title":"Introduction \u00e0 NumPy et ses fonctions math\u00e9matiques","text":"<p>NumPy est une biblioth\u00e8que essentielle pour le calcul scientifique en Python. Elle offre des outils puissants pour effectuer des calculs math\u00e9matiques rapides et pr\u00e9cis, notamment gr\u00e2ce \u00e0 ses fonctions optimis\u00e9es pour les tableaux  (ndarray). Voici une introduction aux fonctions math\u00e9matiques de base de NumPy, incluant les logarithmes, racines carr\u00e9es, fonctions trigonom\u00e9triques, et constantes math\u00e9matiques.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/#1-constantes-mathematiques-npe-et-nppi","title":"1. Constantes math\u00e9matiques : <code>np.e</code> et <code>np.pi</code>","text":"<p>NumPy fournit des constantes int\u00e9gr\u00e9es pour les nombres math\u00e9matiques importants :</p> <ul> <li><code>np.e</code> : La base du logarithme naturel (environ 2.718).</li> <li><code>np.pi</code> : La valeur de \\(\\pi\\) (environ 3.14159).</li> </ul> <p>Exemple :</p> <pre><code>import numpy as np\n\nprint(f\"Constante e : {np.e}\")\nprint(f\"Constante pi : {np.pi}\")\n# Sortie :\n# Constante e : 2.718281828459045\n# Constante pi : 3.141592653589793\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/#2-logarithmes","title":"2. Logarithmes","text":"<p>NumPy propose plusieurs fonctions pour calculer diff\u00e9rents types de logarithmes :</p> <ul> <li><code>np.log(x)</code> : Logarithme naturel (\\(\\ln(x)\\)).</li> <li><code>np.log10(x)</code> : Logarithme d\u00e9cimal (\\(\\log_{10}(x)\\)).</li> </ul> <p>Exemple :</p> <pre><code>x = np.array([1, np.e, 10])\nprint(np.log(x))  # Logarithme naturel\n# Sortie : [0.         1.         2.30258509]\n\nprint(np.log10(x))  # Logarithme d\u00e9cimal\n# Sortie : [0. 1. 1.]\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/#3-racine-carree","title":"3. Racine carr\u00e9e","text":"<p>La fonction <code>np.sqrt(x)</code> calcule la racine carr\u00e9e de chaque \u00e9l\u00e9ment d\u2019un tableau ou d\u2019un nombre.</p> <p>Exemple :</p> <pre><code>x = np.array([4, 9, 16])\nprint(np.sqrt(x))\n# Sortie : [2. 3. 4.]\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/#4-fonctions-trigonometriques","title":"4. Fonctions trigonom\u00e9triques","text":"<p>NumPy propose des fonctions pour les calculs trigonom\u00e9triques classiques :</p> <ul> <li><code>np.sin(x)</code> : Calcule le sinus.</li> <li><code>np.cos(x)</code> : Calcule le cosinus.</li> <li><code>np.tan(x)</code> : Calcule la tangente.</li> </ul> <p>Ces fonctions utilisent des angles exprim\u00e9s en radians.</p> <p>Exemple avec radians :</p> <pre><code>angles = np.array([0, np.pi / 2, np.pi])\nprint(np.sin(angles))  # Sortie : [0. 1. 0.]\nprint(np.cos(angles))  # Sortie : [1. 0. -1.]\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/#5-conversion-entre-degres-et-radians","title":"5. Conversion entre degr\u00e9s et radians","text":"<p>Pour travailler avec des angles exprim\u00e9s en degr\u00e9s, NumPy propose deux fonctions utiles :</p> <ul> <li><code>np.radians(degrees)</code> : Convertit des degr\u00e9s en radians.</li> <li><code>np.degrees(radians)</code> : Convertit des radians en degr\u00e9s.</li> </ul> <p>Exemple :</p> <pre><code>deg = np.array([0, 90, 180])\nrad = np.radians(deg)\nprint(rad)  # Sortie : [0.         1.57079633 3.14159265]\n\nradians = np.array([0, np.pi / 2, np.pi])\ndeg = np.degrees(radians)\nprint(deg)  # Sortie : [  0.  90. 180.]\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/04-numpy/#resume-des-principales-fonctions-mathematiques-de-numpy","title":"R\u00e9sum\u00e9 des principales fonctions math\u00e9matiques de NumPy","text":"Fonction Description Exemple d\u2019utilisation <code>np.e</code> Constante \\(e\\) <code>np.e</code> \u2192 <code>2.718281828459045</code> <code>np.pi</code> Constante \\(\\pi\\) <code>np.pi</code> \u2192 <code>3.141592653589793</code> <code>np.log(x)</code> Logarithme naturel (\\(\\ln(x)\\)) <code>np.log(10)</code> \u2192 <code>2.302585092994046</code> <code>np.log10(x)</code> Logarithme d\u00e9cimal (\\(\\log_{10}(x)\\)) <code>np.log10(100)</code> \u2192 <code>2.0</code> <code>np.sqrt(x)</code> Racine carr\u00e9e <code>np.sqrt(16)</code> \u2192 <code>4.0</code> <code>np.sin(x)</code> Sinus (angle en radians) <code>np.sin(np.pi/2)</code> \u2192 <code>1.0</code> <code>np.cos(x)</code> Cosinus (angle en radians) <code>np.cos(0)</code> \u2192 <code>1.0</code> <code>np.tan(x)</code> Tangente (angle en radians) <code>np.tan(np.pi/4)</code> \u2192 <code>1.0</code> <code>np.radians(x)</code> Conversion degr\u00e9s \u2192 radians <code>np.radians(180)</code> \u2192 <code>3.141592653589793</code> <code>np.degrees(x)</code> Conversion radians \u2192 degr\u00e9s <code>np.degrees(np.pi/2)</code> \u2192 <code>90.0</code> <p>Avec ces outils, NumPy simplifie consid\u00e9rablement les calculs scientifiques et num\u00e9riques ! Vous pouvez maintenant manipuler facilement des logarithmes, racines carr\u00e9es et fonctions trigonom\u00e9triques tout en travaillant avec des angles exprim\u00e9s en degr\u00e9s ou radians.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/","title":"5. Module <code>pyplot</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#introduction-a-matplotlibpyplot","title":"Introduction \u00e0 <code>matplotlib.pyplot</code>","text":"<p><code>matplotlib.pyplot</code> est un module de la biblioth\u00e8que Matplotlib qui fournit une interface simple et intuitive pour cr\u00e9er des graphiques, inspir\u00e9e de MATLAB. Chaque fonction de <code>pyplot</code> modifie une figure ou un graphique, permettant de tracer, personnaliser et afficher des visualisations.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#1-creation-dune-figure-pltfigure","title":"1. Cr\u00e9ation d\u2019une figure : <code>plt.figure()</code>","text":"<p>La fonction <code>plt.figure()</code> cr\u00e9e une nouvelle figure ou active une figure existante. Une figure est le conteneur principal pour un graphique.</p> <p>Exemple :</p> <pre><code>import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(8, 6))  # Cr\u00e9e une figure de taille 8x6 pouces\n</code></pre> <ul> <li>Param\u00e8tres importants :<ul> <li><code>figsize=(width, height)</code>: Dimensions de la figure en pouces.</li> <li><code>dpi</code>: R\u00e9solution en points par pouce (par d\u00e9faut 100).</li> </ul> </li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#2-tracer-des-courbes-pltplot","title":"2. Tracer des courbes : <code>plt.plot()</code>","text":"<p>La fonction <code>plt.plot()</code> trace des courbes reliant des points donn\u00e9s par leurs abscisses et ordonn\u00e9es.</p> <p>Exemple :</p> <pre><code>x = [1, 2, 3, 4]\ny = [10, 20, 25, 30]\n\nplt.plot(x, y, label=\"Courbe\", color=\"blue\", linestyle=\"--\", marker=\"o\")\nplt.title(\"Exemple de graphique\")\nplt.xlabel(\"Axe X\")\nplt.ylabel(\"Axe Y\")\nplt.legend()  # Ajoute une l\u00e9gende\n</code></pre> <ul> <li>Options courantes :<ul> <li><code>color</code>: Couleur de la courbe (<code>\"red\"</code>, <code>\"blue\"</code>, etc.).</li> <li><code>linestyle</code>: Style de ligne (<code>\"--\"</code>, <code>\"-\"</code>, etc.).</li> <li><code>marker</code>: Marqueur pour les points (<code>\"o\"</code>, <code>\"s\"</code>, etc.).</li> </ul> </li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#3-afficher-la-figure-pltshow","title":"3. Afficher la figure : <code>plt.show()</code>","text":"<p>La fonction <code>plt.show()</code> affiche toutes les figures cr\u00e9\u00e9es jusqu\u2019\u00e0 pr\u00e9sent. Elle est indispensable pour visualiser vos graphiques dans un script Python.</p> <p>Exemple :</p> <pre><code>plt.show()\n</code></pre> <ul> <li>En mode interactif (comme Jupyter Notebook), cette commande est souvent implicite.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#4-histogrammes-plthist","title":"4. Histogrammes : <code>plt.hist()</code>","text":"<p>La fonction <code>plt.hist()</code> cr\u00e9e un histogramme pour visualiser la distribution des donn\u00e9es.</p> <p>Exemple :</p> <pre><code>data = [1, 2, 2, 3, 3, 3, 4, 4, 5]\nplt.hist(data, bins=5, color=\"green\", edgecolor=\"black\")\nplt.title(\"Histogramme\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#5-graphiques-en-barres-pltbar","title":"5. Graphiques en barres : <code>plt.bar()</code>","text":"<p>La fonction <code>plt.bar()</code> trace des graphiques en barres verticales.</p> <p>Exemple :</p> <pre><code>categories = [\"A\", \"B\", \"C\"]\nvalues = [10, 15, 7]\n\nplt.bar(categories, values, color=\"purple\")\nplt.title(\"Graphique en barres\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#6-conversion-entre-figures-multiples","title":"6. Conversion entre figures multiples","text":"<p>Vous pouvez cr\u00e9er et g\u00e9rer plusieurs figures avec <code>figure()</code> et basculer entre elles.</p> <p>Exemple :</p> <pre><code>f1 = plt.figure(1)\nplt.plot([0, 1], [0, 1], label=\"Figure 1\")\nplt.legend()\n\nf2 = plt.figure(2)\nplt.plot([0, 1], [1, 0], label=\"Figure 2\")\nplt.legend()\n\nplt.show()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/05-pyplot/#7-resume-des-fonctions-principales","title":"7. R\u00e9sum\u00e9 des fonctions principales","text":"Fonction Description <code>plt.figure()</code> Cr\u00e9e ou active une figure <code>plt.plot()</code> Trace une courbe <code>plt.show()</code> Affiche toutes les figures <code>plt.hist()</code> Cr\u00e9e un histogramme <code>plt.bar()</code> Trace un graphique en barres verticales <code>plt.title()</code> D\u00e9finit le titre du graphique <code>plt.xlabel()</code> D\u00e9finit l\u2019\u00e9tiquette de l\u2019axe X <code>plt.ylabel()</code> D\u00e9finit l\u2019\u00e9tiquette de l\u2019axe Y <code>plt.legend()</code> Ajoute une l\u00e9gende au graphique <p>Avec ces outils de base de Matplotlib et son module Pyplot, vous pouvez cr\u00e9er rapidement des graphiques simples ou complexes pour visualiser vos donn\u00e9es efficacement !</p> Citations <ul> <li>[1] https://docs.kanaries.net/fr/topics/Matplotlib/pyplot-figure</li> <li>[2] https://www.geeksforgeeks.org/matplotlib-figure-figure-show-in-python/</li> <li>[3] https://courspython.com/introduction-courbes.html</li> <li>[4] https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.show.html</li> <li>[5] https://matplotlib.org/stable/api/pyplot_summary.html</li> <li>[6] https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html</li> <li>[7] https://matplotlib.org/stable/tutorials/pyplot.html</li> <li>[8] https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.show.html</li> <li>[9] https://stackoverflow.com/questions/2397791/how-can-i-show-figures-separately</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/","title":"6. D\u00e9finition de fonctions","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#introduction-aux-fonctions-en-programmation","title":"Introduction aux fonctions en programmation","text":"<p>Dans nos programmes pr\u00e9c\u00e9dents, nous avons d\u00e9j\u00e0 utilis\u00e9 plusieurs fonctions sans les d\u00e9finir nous-m\u00eames. Par exemple, nous avons employ\u00e9 <code>print()</code> pour afficher du texte \u00e0 l\u2019\u00e9cran, <code>input()</code> pour demander une saisie \u00e0 l\u2019utilisateur, et <code>numpy.cos()</code> (ou <code>np.cos()</code>) pour calculer le cosinus d\u2019un angle. Ces fonctions sont des outils  pr\u00e9d\u00e9finis qui nous permettent d\u2019effectuer des t\u00e2ches sp\u00e9cifiques sans avoir \u00e0 r\u00e9\u00e9crire le code \u00e0 chaque fois.</p> <p>En programmation, les fonctions sont similaires aux fonctions math\u00e9matiques que vous connaissez d\u00e9j\u00e0. Elles prennent des entr\u00e9es (appel\u00e9es arguments ou param\u00e8tres), effectuent des op\u00e9rations sur ces entr\u00e9es, et produisent un r\u00e9sultat. Par exemple, la fonction math\u00e9matique \\(f(x) = x^2\\) prend un nombre \\(x\\) en entr\u00e9e et retourne son carr\u00e9.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#definition-dune-fonction-simple","title":"D\u00e9finition d\u2019une fonction simple","text":"<p>Voyons maintenant comment d\u00e9finir notre propre fonction en Python. Prenons l\u2019exemple d\u2019une fonction qui calcule l\u2019aire d\u2019un cercle.</p> <pre><code>import numpy as np\n\n\ndef aire_cercle(rayon):\n    aire = np.pi * rayon ** 2\n    return aire\n</code></pre> <p>Examinons les diff\u00e9rentes parties de cette d\u00e9finition de fonction :</p> <ol> <li> <p>Signature de la fonction : La ligne <code>def aire_cercle(rayon):</code> est la signature de la fonction. Elle commence par    le mot-cl\u00e9 <code>def</code>, suivi du nom de la fonction et des param\u00e8tres entre parenth\u00e8ses.</p> </li> <li> <p>Nom de la fonction : <code>aire_cercle</code> est le nom que nous avons choisi pour notre fonction. Il est pr\u00e9f\u00e9rable de    choisir un nom descriptif qui indique clairement ce que fait la fonction.</p> </li> <li> <p>Param\u00e8tre : <code>rayon</code> est le param\u00e8tre de notre fonction. C\u2019est la valeur d\u2019entr\u00e9e sur laquelle la fonction va    travailler. Une fonction peut avoir plusieurs param\u00e8tres, s\u00e9par\u00e9s par des virgules.</p> </li> <li> <p>Corps de la fonction et indentation : Le corps de la fonction contient les instructions qui seront ex\u00e9cut\u00e9es    lorsque la fonction sera appel\u00e9e. En Python, le corps de la fonction est indent\u00e9 (g\u00e9n\u00e9ralement de 4 espaces) pour    indiquer qu\u2019il fait partie de la fonction.</p> </li> <li> <p>Instruction return : <code>return aire</code> sp\u00e9cifie la valeur que la fonction doit renvoyer lorsqu\u2019elle est appel\u00e9e.     Dans ce cas, elle renvoie l\u2019aire calcul\u00e9e du cercle.</p> </li> </ol> <p>Pour utiliser cette fonction, nous pouvons maintenant l\u2019appeler en lui fournissant un rayon :</p> <pre><code>resultat = aire_cercle(5)\nprint(f\"L'aire d'un cercle de rayon 5 est : {resultat}\")\n</code></pre> <p>Cette approche nous permet de r\u00e9utiliser facilement le code pour calculer l\u2019aire de diff\u00e9rents cercles sans avoir \u00e0 r\u00e9\u00e9crire la formule \u00e0 chaque fois.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#definition-dune-fonction-avec-plusieurs-parametres","title":"D\u00e9finition d\u2019une fonction avec plusieurs param\u00e8tres","text":"<p>En Python, il est tr\u00e8s courant et souvent n\u00e9cessaire de d\u00e9finir des fonctions qui prennent plusieurs param\u00e8tres. Cela permet \u00e0 une fonction d\u2019\u00eatre plus flexible et de traiter plusieurs entr\u00e9es \u00e0 la fois. Voici comment proc\u00e9der :</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#syntaxe-de-base","title":"Syntaxe de base","text":"<p>La syntaxe pour d\u00e9finir une fonction avec plusieurs param\u00e8tres est similaire \u00e0 celle d\u2019une fonction avec un seul param\u00e8tre, mais nous s\u00e9parons les param\u00e8tres par des virgules dans la signature de la fonction.</p> <pre><code>def nom_fonction(parametre1, parametre2, parametre3):\n    # Corps de la fonction\n    # Op\u00e9rations utilisant les param\u00e8tres\n    return resultat\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#exemple-calcul-du-volume-dune-pyramide-a-4-cotes","title":"Exemple : Calcul du volume d\u2019une pyramide \u00e0 4 c\u00f4t\u00e9s","text":"<p>Pour calculer le volume d\u2019une pyramide \u00e0 4 c\u00f4t\u00e9s (ou pyramide \u00e0 base rectangulaire), nous avons besoin de trois  param\u00e8tres : la longueur de la base, la largeur de la base, et la hauteur de la pyramide. La formule pour le volume  est :</p> <p>\\(V = \\frac{1}{3} \\times longueur \\times largeur \\times hauteur\\).</p> <p>Voici comment nous pouvons d\u00e9finir cette fonction en Python :</p> <pre><code>def volume_pyramide(longueur, largeur, hauteur):\n    volume = (1 / 3) * longueur * largeur * hauteur\n    return volume\n</code></pre> <p>Dans cet exemple :</p> <ul> <li><code>longueur</code>, <code>largeur</code>, et <code>hauteur</code> sont les trois param\u00e8tres de la fonction.</li> <li>La fonction utilise ces trois param\u00e8tres pour calculer le volume de la pyramide.</li> <li>Le r\u00e9sultat est renvoy\u00e9 \u00e0 l\u2019aide de l\u2019instruction <code>return</code>.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#utilisation-de-la-fonction","title":"Utilisation de la fonction","text":"<p>Pour utiliser cette fonction, nous fournissons les valeurs pour chaque param\u00e8tre dans l\u2019ordre o\u00f9 ils sont d\u00e9finis :</p> <pre><code>resultat = volume_pyramide(5, 5, 10)\nprint(f\"Le volume d'une pyramide de base 5x5 et de hauteur 10 est : {resultat}\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#points-importants-a-retenir","title":"Points importants \u00e0 retenir","text":"<ol> <li> <p>Ordre des param\u00e8tres : L\u2019ordre dans lequel vous d\u00e9finissez les param\u00e8tres est crucial. Lors de l\u2019appel de la    fonction, les arguments doivent \u00eatre fournis dans le m\u00eame ordre (longueur, largeur, hauteur).</p> </li> <li> <p>Nombre de param\u00e8tres : Cette fonction a trois param\u00e8tres, ce qui est parfaitement acceptable. Cependant, si une    fonction n\u00e9cessite de nombreux param\u00e8tres, il peut \u00eatre judicieux de consid\u00e9rer d\u2019autres approches, comme    l\u2019utilisation d\u2019un dictionnaire pour les regrouper.</p> </li> <li> <p>Noms des param\u00e8tres : Notez comment les noms <code>longueur</code>, <code>largeur</code>, et <code>hauteur</code> sont descriptifs et clairs, ce    qui rend la fonction plus facile \u00e0 comprendre et \u00e0 utiliser.</p> </li> <li> <p>Flexibilit\u00e9 : Cette fonction peut calculer le volume de n\u2019importe quelle pyramide \u00e0 base rectangulaire, pas    seulement celles \u00e0 base carr\u00e9e. Si la base est carr\u00e9e, on peut simplement utiliser la m\u00eame valeur pour la longueur et    la largeur.</p> </li> </ol> <p>En utilisant des fonctions avec plusieurs param\u00e8tres comme celle-ci, vous pouvez cr\u00e9er des outils puissants et flexibles pour r\u00e9soudre une vari\u00e9t\u00e9 de probl\u00e8mes en programmation.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#erreurs-courantes-a-eviter-lors-de-la-definition-de-fonctions-en-python","title":"Erreurs courantes \u00e0 \u00e9viter lors de la d\u00e9finition de fonctions en Python","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#erreurs-de-syntaxe","title":"Erreurs de syntaxe","text":"<ol> <li> <p>Oublier les deux-points : Toujours ajouter <code>:</code> \u00e0 la fin de la ligne de d\u00e9finition de la fonction[3].</p> </li> <li> <p>Indentation incorrecte : Le corps de la fonction doit \u00eatre indent\u00e9, g\u00e9n\u00e9ralement de 4 espaces[3].</p> </li> <li> <p>Oublier les parenth\u00e8ses : Pour appeler une fonction, il faut utiliser des parenth\u00e8ses, m\u00eame si elle n\u2019a pas     d\u2019arguments[3].</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#erreurs-de-portee-et-de-nommage","title":"Erreurs de port\u00e9e et de nommage","text":"<ol> <li> <p>Confusion entre variables locales et globales : Les variables d\u00e9finies dans une fonction sont locales par d\u00e9faut.</p> </li> <li> <p>Nommer une variable comme une fonction int\u00e9gr\u00e9e : \u00c9viter d\u2019utiliser des noms comme <code>print</code> ou <code>input</code> qui    masqueraient les fonctions Python int\u00e9gr\u00e9es[1].</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#erreurs-liees-aux-arguments","title":"Erreurs li\u00e9es aux arguments","text":"<ol> <li> <p>Inverser l\u2019ordre des arguments : Les arguments doivent \u00eatre fournis dans le bon ordre. C\u2019est pourquoi il est     important de bien nommer les param\u00e8tres.</p> </li> <li> <p>Trop de param\u00e8tres : Limiter le nombre de param\u00e8tres pour maintenir la lisibilit\u00e9 et la simplicit\u00e9 de la    fonction[9].</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/06-fonctions/#erreurs-de-conception","title":"Erreurs de conception","text":"<ol> <li> <p>Fonctions trop longues ou complexes : Diviser les fonctions trop longues en sous-fonctions plus petites et plus    simples[9].</p> </li> <li> <p>Retourner des types de donn\u00e9es incoh\u00e9rents : Une fonction devrait toujours retourner le m\u00eame type de donn\u00e9es,    quelle que soit la branche d\u2019ex\u00e9cution[14].</p> </li> <li> <p>Ne pas g\u00e9rer les exceptions : Utiliser des blocs <code>try/except</code> pour g\u00e9rer les erreurs potentielles dans la     fonction[15].</p> </li> </ol> <p>En \u00e9vitant ces erreurs courantes, vous pourrez \u00e9crire des fonctions Python plus robustes et maintenables.</p> Citations <ul> <li>[1] https://www.youtube.com/watch?v=IzNh3W2DY-w</li> <li>[2] https://arjancodes.com/blog/python-common-pitfalls-and-fixes-for-syntactic-snafus/</li> <li>[3] https://hackr.io/blog/common-python-mistakes</li> <li>[4] https://rollbar.com/blog/python-errors-and-how-to-handle-them/</li> <li>[5] https://docs.python-guide.org/writing/gotchas/</li> <li>[6] https://doc.sagemath.org/html/en/tutorial/tour_functions.html</li> <li>[7] https://www.reddit.com/r/learnpython/comments/pop076/error_the_function_is_not_defined/</li> <li>[8] https://www.educative.io/blog/common-mistakes-python-programmers-how-to-fix</li> <li>[9] https://www.kdnuggets.com/5-tips-for-writing-better-python-functions</li> <li>[10] https://stackoverflow.com/questions/29690663/def-function-syntax-error-in-python-3/29690687</li> <li>[11] https://stackoverflow.com/questions/1011431/common-pitfalls-in-python</li> <li>[12] https://www.activestate.com/blog/top-10-coding-mistakes-in-python-how-to-avoid-them/</li> <li>[13] https://docs.python.org/3/tutorial/errors.html</li> <li>[14] https://betterstack.com/community/guides/scaling-python/python-errors/</li> <li>[15] https://www.datacamp.com/tutorial/exception-handling-python</li> <li>[16] https://stackoverflow.com/questions/19971453/is-it-bad-practice-in-python-to-define-a-function-in-the-middle-of-operational-c</li> <li>[17] https://www.tutorialsteacher.com/python/error-types-in-python</li> <li>[18] https://docs.python.org/ja/3.12/library/exceptions.html</li> <li>[19] https://www.w3schools.com/python/python_functions.asp</li> <li>[20] https://www.youtube.com/watch?v=zdJEYhA2AZQ</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/","title":"7. Expressions bool\u00e9ennes","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/#introduction-au-type-bool-en-python","title":"Introduction au type <code>bool</code> en Python","text":"<p>Le type <code>bool</code> en Python est un type de donn\u00e9es fondamental qui repr\u00e9sente les valeurs bool\u00e9ennes. Il ne peut prendre que deux valeurs possibles : <code>True</code> (vrai) ou <code>False</code> (faux)[1][2]. Ces valeurs sont utilis\u00e9es pour effectuer des op\u00e9rations logiques et prendre des d\u00e9cisions dans les programmes.</p> <p>Les bool\u00e9ens sont particuli\u00e8rement utiles dans les structures conditionnelles et les boucles. Ils permettent d\u2019\u00e9valuer des conditions et de contr\u00f4ler le flux d\u2019ex\u00e9cution du programme.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/#expressions-logiques","title":"Expressions logiques","text":"<p>Les expressions logiques en Python utilisent des op\u00e9rateurs de comparaison et des op\u00e9rateurs logiques pour cr\u00e9er des conditions complexes[2][4]. Voici les principaux op\u00e9rateurs :</p> <p>Op\u00e9rateurs de comparaison :</p> <ul> <li>\u00c9galit\u00e9 : <code>==</code></li> <li>In\u00e9galit\u00e9 : <code>!=</code></li> <li>Sup\u00e9rieur \u00e0 : <code>&gt;</code></li> <li>Inf\u00e9rieur \u00e0 : <code>&lt;</code></li> <li>Sup\u00e9rieur ou \u00e9gal \u00e0 : <code>&gt;=</code></li> <li>Inf\u00e9rieur ou \u00e9gal \u00e0 : <code>&lt;=</code></li> </ul> <p>Op\u00e9rateurs logiques :</p> <ul> <li>ET logique : <code>and</code></li> <li>OU logique : <code>or</code></li> <li>NON logique : <code>not</code></li> </ul> <p>Ces op\u00e9rateurs permettent de combiner des conditions simples pour former des expressions bool\u00e9ennes plus complexes.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/#tableau-de-priorite-des-operateurs-en-python","title":"Tableau de priorit\u00e9 des op\u00e9rateurs en Python","text":"<p>Voici un tableau indiquant la priorit\u00e9 des op\u00e9rateurs en Python, des plus prioritaires aux moins prioritaires :</p> Priorit\u00e9 Op\u00e9rateurs 1 Parenth\u00e8ses <code>()</code> 2 Exposant <code>**</code> 3 Multiplication <code>*</code>, Division <code>/</code>, Division enti\u00e8re <code>//</code>, Modulo <code>%</code> 4 Addition <code>+</code>, Soustraction <code>-</code> 5 Op\u00e9rateurs de comparaison <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code> 6 NON logique <code>not</code> 7 ET logique <code>and</code> 8 OU logique <code>or</code> <p>Il est important de noter que les parenth\u00e8ses ont la plus haute priorit\u00e9 et peuvent \u00eatre utilis\u00e9es pour forcer l\u2019ordre d\u2019\u00e9valuation des expressions[2]. Les op\u00e9rateurs logiques (<code>not</code>, <code>and</code>, <code>or</code>) ont la priorit\u00e9 la plus basse, ce qui signifie qu\u2019ils sont \u00e9valu\u00e9s en dernier dans une expression complexe[4].</p> <p>En cas de doute sur l\u2019ordre d\u2019\u00e9valuation d\u2019une expression, il est toujours recommand\u00e9 d\u2019utiliser des parenth\u00e8ses pour expliciter l\u2019ordre souhait\u00e9 et am\u00e9liorer la lisibilit\u00e9 du code[2].</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/#tables-de-verite","title":"Tables de v\u00e9rit\u00e9","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/#table-de-verite-pour-la-negation-operateur-not","title":"Table de v\u00e9rit\u00e9 pour la n\u00e9gation (op\u00e9rateur NOT)","text":"<p>L\u2019op\u00e9rateur <code>not</code> inverse la valeur de v\u00e9rit\u00e9 de son op\u00e9rande.</p> <code>a</code> <code>not a</code> <code>True</code> <code>False</code> <code>False</code> <code>True</code>"},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/#table-de-verite-pour-la-conjonction-operateur-and","title":"Table de v\u00e9rit\u00e9 pour la conjonction (op\u00e9rateur AND)","text":"<p>L\u2019op\u00e9rateur <code>and</code> renvoie <code>True</code> uniquement si les deux op\u00e9randes sont <code>True</code>.</p> <code>a</code> <code>b</code> <code>a and b</code> <code>True</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>False</code>"},{"location":"R%C3%A9sum%C3%A9/Notions/07-expressions-bool%C3%A9ennes/#table-de-verite-pour-la-disjonction-operateur-or","title":"Table de v\u00e9rit\u00e9 pour la disjonction (op\u00e9rateur OR)","text":"<p>L\u2019op\u00e9rateur OR renvoie <code>True</code> si au moins l\u2019un des op\u00e9randes est <code>True</code>.</p> <code>a</code> <code>b</code> <code>a or b</code> <code>True</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <p>Ces tables de v\u00e9rit\u00e9 sont fondamentales pour comprendre le comportement des op\u00e9rations logiques en programmation. Elles sont particuli\u00e8rement utiles lors de la construction de conditions complexes dans les structures de contr\u00f4le comme les instructions if ou les boucles while.</p> Citations <ul> <li>[1] https://zestedesavoir.com/tutoriels/2514/un-zeste-de-python/3-structures-conditionnelles/2-expressions-booleennes/</li> <li>[2] https://cs.stanford.edu/people/nick/py/python-boolean.html</li> <li>[3] https://www.docstring.fr/glossaire/boolean/</li> <li>[4] https://www.linode.com/docs/guides/boolean-variables-in-python/</li> <li>[5] https://www.ukonline.be/cours/python/apprendre-python/chapitre3-1</li> <li>[6] http://perso.limsi.fr/pointal/python:booleens</li> <li>[7] https://monlyceenumerique.fr/nsi_premiere/langages_de_prog_lp/lp2_structure_conditionnelle.php</li> <li>[8] https://realpython.com/python-boolean/</li> <li>[9] https://www.digitalocean.com/community/tutorials/understanding-boolean-logic-in-python-3</li> <li>[10] https://codehs.com/tutorial/ryan/booleans-and-logical-operators-in-python</li> <li>[11] https://realpython.com/python-and-operator/</li> <li>[12] https://fr.wikibooks.org/wiki/Programmation_Python/Bool%C3%A9ens</li> <li>[13] https://www.edlitera.com/blog/posts/python-booleans-comparison-operators-logical-operators</li> <li>[14] https://koor.fr/Python/Tutorial/python_type_bool.wp</li> <li>[15] https://www.docstring.fr/glossaire/and/</li> <li>[16] https://egallic.fr/Enseignement/Python/operateurs.html</li> <li>[17] https://docs.python.org/fr/3.6/reference/expressions.html</li> <li>[18] https://python.developpez.com/tutoriels/apprendre-programmation-python/les-bases/?page=instruction-de-controle</li> <li>[19] https://phys-mod.github.io/source/notebooks/python-intermediaire/02-logique-filtrage.html</li> <li>[20] https://gayerie.dev/docs/python/python3/type_et_variable.html</li> <li>[21] https://www.9raytifclick.com/cours/instructions-dentrees-sorties-print-input-en-python/</li> <li>[22] https://fr.wikibooks.org/wiki/Programmation_Python/Op%C3%A9rateurs</li> <li>[23] https://fr.wikibooks.org/wiki/Programmation_Python/Tableau_des_op%C3%A9rateurs</li> <li>[24] https://www.ionos.fr/digitalguide/sites-internet/developpement-web/operateurs-python/</li> <li>[25] https://www.pythonize.ir/fr/lecons/la_priorit%C3%A9/</li> <li>[26] https://cahier-de-prepa.fr/pt-vauban/download?id=3584</li> <li>[27] https://www.datacamp.com/fr/tutorial/python-operators-tutorial</li> <li>[28] https://koor.fr/Python/Tutorial/python_operator_table_precedence.wp</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/08-conditionnelles/","title":"8. Conditionnelles","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/08-conditionnelles/#introduction-aux-conditionnelles-en-python","title":"Introduction aux conditionnelles en Python","text":"<p>Les structures conditionnelles sont essentielles en programmation car elles permettent \u00e0 un programme de prendre des d\u00e9cisions et d\u2019ex\u00e9cuter diff\u00e9rentes parties du code en fonction de certaines conditions. En Python, nous utilisons principalement les instructions <code>if</code>, <code>else</code>, et <code>elif</code> pour cr\u00e9er ces structures conditionnelles.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/08-conditionnelles/#instruction-if","title":"Instruction <code>if</code>","text":"<p>L\u2019instruction <code>if</code> est la forme la plus simple de structure conditionnelle. Elle permet d\u2019ex\u00e9cuter un bloc de code uniquement si une condition donn\u00e9e est vraie.</p> <p>Syntaxe :</p> <pre><code>if condition:\n    # bloc de code \u00e0 ex\u00e9cuter si la condition est vraie\n</code></pre> <p>Exemple :</p> <pre><code>age = 18\nif age &gt;= 18:\n    print(\"Vous \u00eates majeur.\")\n</code></pre> <p>Dans cet exemple, le message s\u2019affichera uniquement si l\u2019\u00e2ge est sup\u00e9rieur ou \u00e9gal \u00e0 18.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/08-conditionnelles/#structure-if-else","title":"Structure <code>if-else</code>","text":"<p>La structure <code>if-else</code> permet d\u2019ex\u00e9cuter un bloc de code si la condition est vraie, et un autre bloc si elle est fausse.</p> <p>Syntaxe :</p> <pre><code>if condition:\n    # bloc de code \u00e0 ex\u00e9cuter si la condition est vraie\nelse:\n    # bloc de code \u00e0 ex\u00e9cuter si la condition est fausse\n</code></pre> <p>Exemple :</p> <pre><code>age = 16\nif age &gt;= 18:\n    print(\"Vous \u00eates majeur.\")\nelse:\n    print(\"Vous \u00eates mineur.\")\n</code></pre> <p>Dans ce cas, le programme affichera \u201cVous \u00eates mineur.\u201d car la condition <code>age &gt;= 18</code> est fausse.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/08-conditionnelles/#structure-if-elif-else","title":"Structure <code>if-elif-else</code>","text":"<p>La structure <code>if-elif-else</code> permet de tester plusieurs conditions successives. <code>elif</code> est une contraction de \u201celse if\u201d.</p> <p>Syntaxe :</p> <pre><code>if condition1:\n# bloc de code si condition1 est vraie\nelif condition2:\n# bloc de code si condition2 est vraie\nelif condition3:\n# bloc de code si condition3 est vraie\nelse:\n# bloc de code si aucune des conditions pr\u00e9c\u00e9dentes n'est vraie\n</code></pre> <p>Exemple :</p> <pre><code>note = 75\n\nif note &gt;= 90:\n    print(\"Excellent\")\nelif note &gt;= 80:\n    print(\"Tr\u00e8s bien\")\nelif note &gt;= 70:\n    print(\"Bien\")\nelif note &gt;= 60:\n    print(\"Passable\")\nelse:\n    print(\"Insuffisant\")\n</code></pre> <p>Dans cet exemple, le programme affichera \u201cBien\u201d car la note est sup\u00e9rieure ou \u00e9gale \u00e0 70 mais inf\u00e9rieure \u00e0 80.</p> <p>Points importants \u00e0 retenir :</p> <ol> <li>L\u2019indentation est cruciale en Python. Le bloc de code sous chaque condition doit \u00eatre indent\u00e9.</li> <li>Vous pouvez avoir autant de <code>elif</code> que n\u00e9cessaire.</li> <li>La partie <code>else</code> est optionnelle.</li> <li>Seul le premier bloc dont la condition est vraie sera ex\u00e9cut\u00e9. Les autres blocs seront ignor\u00e9s, m\u00eame si leurs    conditions sont \u00e9galement vraies.</li> </ol> <p>En utilisant ces structures conditionnelles, vous pouvez cr\u00e9er des programmes qui prennent des d\u00e9cisions bas\u00e9es sur diff\u00e9rentes conditions, rendant votre code plus flexible et capable de g\u00e9rer diverses situations.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/09-match/","title":"9. Correspondance de cas <code>match-case</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/09-match/#introduction-au-match-en-python","title":"Introduction au <code>match</code> en Python","text":"<p>Le <code>match</code> est une structure de contr\u00f4le introduite dans Python 3.10 qui permet d\u2019effectuer une correspondance de motifs structurelle. Cette fonctionnalit\u00e9 est similaire au <code>switch-case</code> d\u2019autres langages de programmation, mais offre des capacit\u00e9s plus avanc\u00e9es.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/09-match/#syntaxe-de-base","title":"Syntaxe de base","text":"<p>La syntaxe g\u00e9n\u00e9rale du <code>match</code> est la suivante :</p> <pre><code>match expression:\n    case motif1:\n    # code \u00e0 ex\u00e9cuter si motif1 correspond\n    case motif2:\n    # code \u00e0 ex\u00e9cuter si motif2 correspond\n    case _:\n    # code \u00e0 ex\u00e9cuter si aucun autre motif ne correspond\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/09-match/#fonctionnement","title":"Fonctionnement","text":"<ol> <li>L\u2019expression apr\u00e8s le mot-cl\u00e9 <code>match</code> est \u00e9valu\u00e9e.</li> <li>Cette valeur est compar\u00e9e successivement \u00e0 chaque motif d\u00e9fini par les clauses <code>case</code>.</li> <li>Lorsqu\u2019un motif correspond, le bloc de code associ\u00e9 est ex\u00e9cut\u00e9.</li> <li>Si aucun motif ne correspond, le bloc de code associ\u00e9 au motif <code>_</code> (joker) est ex\u00e9cut\u00e9, s\u2019il est pr\u00e9sent.</li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/09-match/#exemples-dutilisation","title":"Exemples d\u2019utilisation","text":"<p>Correspondance simple :</p> <pre><code>def jour_type(jour):\n    match jour:\n        case \"lundi\" | \"mardi\" | \"mercredi\" | \"jeudi\" | \"vendredi\":\n            return \"jour ouvr\u00e9\"\n        case \"samedi\" | \"dimanche\":\n            return \"week-end\"\n        case _:\n            return \"jour invalide\"\n\n\nprint(jour_type(\"lundi\"))  # Affiche : jour ouvr\u00e9\nprint(jour_type(\"samedi\"))  # Affiche : week-end\n</code></pre> <p>Correspondance avec conditions :</p> <pre><code>def categoriser_nombre(x):\n    match x:\n        case x if x &lt; 0:\n            return \"n\u00e9gatif\"\n        case 0:\n            return \"z\u00e9ro\"\n        case x if x &gt; 0:\n            return \"positif\"\n\n\nprint(categoriser_nombre(-5))  # Affiche : n\u00e9gatif\nprint(categoriser_nombre(0))  # Affiche : z\u00e9ro\nprint(categoriser_nombre(10))  # Affiche : positif\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/09-match/#avantages-du-match","title":"Avantages du <code>match</code>","text":"<ol> <li>Lisibilit\u00e9 : Le code est souvent plus clair et plus concis qu\u2019avec des <code>if-elif-else</code> multiples.</li> <li>Flexibilit\u00e9 : Permet de correspondre \u00e0 des structures de donn\u00e9es complexes et d\u2019extraire des valeurs.</li> <li>Performance : Peut \u00eatre plus efficace que des cha\u00eenes de <code>if-elif</code> pour de nombreux cas.</li> </ol> <p>Le <code>match</code> est particuli\u00e8rement utile pour traiter des structures de donn\u00e9es complexes, impl\u00e9menter des automates \u00e0 \u00e9tats finis, ou g\u00e9rer diff\u00e9rents types de messages dans des applications de traitement de donn\u00e9es[1][2][5].</p> Citations <ul> <li>[1] https://mimo.org/glossary/python/match-statement</li> <li>[2] https://www.datamentor.io/python/match-case</li> <li>[3] https://blog.stackademic.com/python-match-case-statement-63d01477e1c0</li> <li>[4] https://www.tutorialspoint.com/python/python_matchcase_statement.htm</li> <li>[5] https://www.youtube.com/watch?v=L7tT0NZF-Ag</li> <li>[6] https://www.programiz.com/python-programming/match-case</li> <li>[7] https://tonybaloney.github.io/posts/python-match-statement.html</li> <li>[8] https://www.datacamp.com/tutorial/python-switch-case</li> <li>[9] https://docs.python.org/3/whatsnew/3.10.html</li> <li>[10] https://learnpython.com/blog/python-match-case-statement/</li> <li>[11] https://guicommits.com/python-match-case-examples/</li> <li>[12] https://peps.python.org/pep-0636/</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/10-indentation/","title":"10. Importance de l\u2019indentation","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/10-indentation/#limportance-de-lindentation-en-python","title":"L\u2019importance de l\u2019indentation en Python","text":"<p>L\u2019indentation est un aspect fondamental et distinctif de Python. Contrairement \u00e0 de nombreux autres langages de programmation qui utilisent des accolades ou des mots-cl\u00e9s pour d\u00e9limiter les blocs de code, Python utilise l\u2019indentation. Cette approche rend le code plus lisible et force les programmeurs \u00e0 structurer leur code de mani\u00e8re coh\u00e9rente.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/10-indentation/#role-de-lindentation","title":"R\u00f4le de l\u2019indentation","text":"<ol> <li> <p>D\u00e9limitation des blocs : L\u2019indentation d\u00e9finit la structure et la hi\u00e9rarchie du code en d\u00e9limitant les blocs     d\u2019instructions.</p> </li> <li> <p>Lisibilit\u00e9 : Un code bien indent\u00e9 est plus facile \u00e0 lire et \u00e0 comprendre, ce qui facilite la maintenance et la    collaboration.</p> </li> <li> <p>R\u00e9duction des erreurs : L\u2019indentation obligatoire aide \u00e0 pr\u00e9venir certaines erreurs courantes li\u00e9es \u00e0 la    structure du code.</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/10-indentation/#fonctionnement-de-lindentation","title":"Fonctionnement de l\u2019indentation","text":"<ul> <li>D\u00e9but d\u2019un bloc : Un bloc de code commence apr\u00e8s un deux-points <code>:</code> et est indent\u00e9 par rapport \u00e0 la ligne   pr\u00e9c\u00e9dente.</li> <li>Coh\u00e9rence : Toutes les lignes d\u2019un m\u00eame bloc doivent avoir la m\u00eame indentation.</li> <li>Fin d\u2019un bloc : Un bloc se termine lorsque l\u2019indentation revient au niveau pr\u00e9c\u00e9dent ou \u00e0 un niveau sup\u00e9rieur.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/10-indentation/#exemple-dindentation-correcte","title":"Exemple d\u2019indentation correcte","text":"<pre><code>def calculer_moyenne(notes):\n    if len(notes) &gt; 0:\n        somme = 0\n        for note in notes:\n            somme += note\n        moyenne = somme / len(notes)\n        return moyenne\n    else:\n        return None\n\n\nnotes_eleve = [15, 12, 18, 10]\nresultat = calculer_moyenne(notes_eleve)\nif resultat is not None:\n    print(f\"La moyenne est : {resultat}\")\nelse:\n    print(\"Aucune note disponible\")\n</code></pre> <p>Dans cet exemple, l\u2019indentation montre clairement la structure du code :</p> <ul> <li>La fonction <code>calculer_moyenne</code> est d\u00e9finie au niveau principal.</li> <li>Le bloc <code>if-else</code> \u00e0 l\u2019int\u00e9rieur de la fonction est indent\u00e9.</li> <li>La boucle <code>for</code> est encore plus indent\u00e9e, montrant qu\u2019elle est \u00e0 l\u2019int\u00e9rieur du bloc <code>if</code>.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/10-indentation/#regles-importantes","title":"R\u00e8gles importantes","text":"<ol> <li> <p>Coh\u00e9rence : Utilisez toujours le m\u00eame nombre d\u2019espaces pour chaque niveau d\u2019indentation. La norme PEP 8    recommande 4 espaces.</p> </li> <li> <p>Pas de m\u00e9lange : Ne m\u00e9langez jamais les espaces et les tabulations pour l\u2019indentation dans un m\u00eame fichier.</p> </li> <li> <p>Alignement vertical : Les lignes de continuation doivent s\u2019aligner avec le d\u00e9limiteur de parenth\u00e8se ouvrante ou    utiliser un retrait suspendu.</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/10-indentation/#erreurs-courantes-liees-a-lindentation","title":"Erreurs courantes li\u00e9es \u00e0 l\u2019indentation","text":"<ol> <li> <p><code>IndentationError</code> : Se produit lorsque l\u2019indentation est incorrecte ou incoh\u00e9rente.</p> </li> <li> <p><code>UnexpectedIndent</code> : Appara\u00eet quand une ligne est indent\u00e9e alors qu\u2019elle ne devrait pas l\u2019\u00eatre.</p> </li> <li> <p><code>IndentationError: unexpected unindent</code> : Se produit lorsqu\u2019une ligne n\u2019est pas suffisamment indent\u00e9e par rapport    au bloc pr\u00e9c\u00e9dent.</p> </li> </ol> <p>L\u2019indentation en Python n\u2019est pas seulement une convention stylistique, c\u2019est une partie int\u00e9grante de la syntaxe du langage. Une bonne compr\u00e9hension et une application coh\u00e9rente de l\u2019indentation sont essentielles pour \u00e9crire du code Python correct et lisible.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/","title":"11. Boucles <code>while</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#introduction-aux-boucles-while","title":"Introduction aux Boucles <code>while</code>","text":"<p>Les boucles <code>while</code> sont un \u00e9l\u00e9ment fondamental en programmation Python, permettant d\u2019ex\u00e9cuter un bloc de code tant qu\u2019 une condition sp\u00e9cifique est remplie. Pour comprendre leur fonctionnement, il est utile de les comparer aux instructions conditionnelles <code>if</code>.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#comparaison-avec-if","title":"Comparaison avec <code>if</code>","text":"<p>Consid\u00e9rons deux exemples simples :</p> <ol> <li>Instruction <code>if</code> :    <pre><code>x = 5\nif x &lt; 10:\n    print(\"x est inf\u00e9rieur \u00e0 10\")\n</code></pre></li> </ol> <p>Dans cet exemple, le message sera affich\u00e9 une seule fois si <code>x</code> est inf\u00e9rieur \u00e0 10.</p> <ol> <li>Boucle <code>while</code> :    <pre><code>x = 5\nwhile x &lt; 10:\n    print(\"x est inf\u00e9rieur \u00e0 10\")\n    x += 1\n</code></pre></li> </ol> <p>Ici, le message sera affich\u00e9 \u00e0 chaque it\u00e9ration tant que <code>x</code> est inf\u00e9rieur \u00e0 10. La valeur de <code>x</code> est incr\u00e9ment\u00e9e \u00e0    chaque it\u00e9ration pour \u00e9viter une boucle infinie.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#difference-fondamentale","title":"Diff\u00e9rence Fondamentale","text":"<p>La diff\u00e9rence cl\u00e9 entre <code>if</code> et <code>while</code> est la r\u00e9p\u00e9tition :</p> <ul> <li><code>if</code> v\u00e9rifie une condition et ex\u00e9cute le code associ\u00e9 une seule fois si la condition est vraie.</li> <li><code>while</code> continue d\u2019ex\u00e9cuter le code tant que la condition est vraie.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#necessite-de-mettre-fin-a-la-boucle","title":"N\u00e9cessit\u00e9 de Mettre Fin \u00e0 la Boucle","text":"<p>Pour \u00e9viter une boucle infinie, il est crucial de modifier la condition \u00e0 l\u2019int\u00e9rieur de la boucle pour qu\u2019elle devienne fausse apr\u00e8s un certain nombre d\u2019it\u00e9rations. Dans l\u2019exemple ci-dessus, <code>x += 1</code> assure que la condition <code>x &lt; 10</code> deviendra fausse apr\u00e8s plusieurs it\u00e9rations.</p> <p>Si la condition n\u2019est jamais modifi\u00e9e, comme dans l\u2019exemple suivant, la boucle continuera ind\u00e9finiment :</p> <pre><code>x = 5\nwhile x &lt; 10:\n    print(\"x est inf\u00e9rieur \u00e0 10\")\n</code></pre> <p>Cela entra\u00eenera une boucle infinie, car <code>x</code> reste toujours inf\u00e9rieur \u00e0 10.</p> <p>En r\u00e9sum\u00e9, les boucles <code>while</code> sont puissantes pour r\u00e9p\u00e9ter des actions, mais elles n\u00e9cessitent une gestion soigneuse de la condition pour \u00e9viter les boucles infinies.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#validation-des-entrees","title":"Validation des entr\u00e9es","text":"<p>Voici un exemple de fonction Python qui utilise une boucle <code>while</code> pour demander \u00e0 l\u2019utilisateur d\u2019entrer un nombre r\u00e9el sup\u00e9rieur \u00e0 0.</p> <pre><code>def demander_nombre_positif():\n    \"\"\"\n    Demande \u00e0 l'utilisateur d'entrer un nombre r\u00e9el sup\u00e9rieur \u00e0 0.\n\n    Retourne le nombre une fois que la condition est satisfaite.\n    \"\"\"\n    nombre = float(input(\"Veuillez entrer un nombre r\u00e9el sup\u00e9rieur \u00e0 0 : \"))\n\n    # Boucle tant que le nombre n'est pas sup\u00e9rieur \u00e0 0\n    while nombre &lt;= 0:\n        print(\"Le nombre doit \u00eatre sup\u00e9rieur \u00e0 0.\")\n        nombre = float(input(\"Veuillez entrer un nombre r\u00e9el sup\u00e9rieur \u00e0 0 : \"))\n\n    return nombre\n\n\n# Exemple d'utilisation\nnombre_positif = demander_nombre_positif()\nprint(f\"Le nombre positif saisi est : {nombre_positif}\")\n</code></pre> <p>Dans cette fonction, la boucle <code>while</code> continue de demander un nombre \u00e0 l\u2019utilisateur tant que celui-ci n\u2019est pas sup\u00e9rieur \u00e0 0. Une fois que la condition est satisfaite, la fonction retourne le nombre.</p> Exceptions (facultatif) <p>Si l\u2019utilisateur n\u2019entre pas un nombre valide (par exemple, une cha\u00eene de caract\u00e8res ou un symbole), la fonction   pr\u00e9c\u00e9dente g\u00e9n\u00e9rera une erreur de type <code>ValueError</code>. Cela se produit car la fonction <code>float()</code> tente de convertir la   saisie utilisateur en un nombre flottant, ce qui \u00e9choue si la saisie n\u2019est pas un nombre.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, il est possible d\u2019utiliser une gestion d\u2019exceptions (<code>try-except</code>) pour capturer les   erreurs de conversion et redemander \u00e0 l\u2019utilisateur de saisir un nombre valide. Voici une variation de la fonction   pr\u00e9c\u00e9dente qui inclut cette gestion :</p> <pre><code>def demander_nombre_positif():\n    \"\"\"\n    Demande \u00e0 l'utilisateur d'entrer un nombre r\u00e9el sup\u00e9rieur \u00e0 0.\n\n    Retourne le nombre une fois que la condition est satisfaite.\n    \"\"\"\n    nombre_valide = False\n    nombre = None\n\n    while not nombre_valide:\n        try:\n            nombre = float(input(\"Veuillez entrer un nombre r\u00e9el sup\u00e9rieur \u00e0 0 : \"))\n            if nombre &gt; 0:\n                nombre_valide = True\n            else:\n                print(\"Le nombre doit \u00eatre sup\u00e9rieur \u00e0 0.\")\n        except ValueError:\n            print(\"La saisie n'est pas un nombre valide. Veuillez r\u00e9essayer.\")\n\n    return nombre\n\n# Exemple d'utilisation\nnombre_positif = demander_nombre_positif()\nprint(f\"Le nombre positif saisi est : {nombre_positif}\")\n</code></pre> <p>Dans cette version, la boucle <code>while</code> continue ind\u00e9finiment jusqu\u2019\u00e0 ce que l\u2019utilisateur entre un nombre r\u00e9el sup\u00e9rieur   \u00e0 0. Si la conversion en <code>float</code> \u00e9choue (ce qui d\u00e9clenche une exception <code>ValueError</code>), un message d\u2019erreur est affich\u00e9   et l\u2019utilisateur est invit\u00e9 \u00e0 r\u00e9essayer. Si le nombre est valide mais inf\u00e9rieur ou \u00e9gal \u00e0 0, un message est \u00e9galement   affich\u00e9 pour demander un nombre sup\u00e9rieur \u00e0 0.</p> <p>Dans cette version, la variable <code>nombre_valide</code> agit comme sentinelle. La boucle continue tant que    <code>nombre_valide</code> est <code>False</code>. D\u00e8s que le nombre saisi est valide et sup\u00e9rieur \u00e0 0, <code>nombre_valide</code> est d\u00e9fini \u00e0    <code>True</code>, ce qui met fin \u00e0 la boucle.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#calcul-de-la-sommation-sum_i1n-frac1i","title":"Calcul de la Sommation \\(\\sum_{i=1}^{n} \\frac{1}{i}\\)","text":"<p>La sommation \\(\\sum_{i=1}^{n} \\frac{1}{i}\\) est une s\u00e9rie bien connue en math\u00e9matiques, souvent utilis\u00e9e pour illustrer les s\u00e9ries divergentes. Ici, nous allons \u00e9crire une fonction Python pour calculer cette sommation en utilisant une boucle <code>while</code>.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#fonction-python-pour-la-sommation","title":"Fonction Python pour la Sommation","text":"<p>Voici une fonction Python qui calcule la sommation \\(\\sum_{i=1}^{n} \\frac{1}{i}\\) en utilisant une boucle <code>while</code>.</p> <pre><code>def sommation_inverse_while(n):\n    \"\"\"\n    Calcule la sommation \\sum_{i=1}^{n} 1/i en utilisant une boucle while.\n\n    Arguments:\n    n -- entier positif repr\u00e9sentant la limite sup\u00e9rieure de la sommation.\n\n    Retourne:\n    La valeur de la sommation.\n    \"\"\"\n    if n &lt; 1:\n        return 0\n\n    somme = 0\n    i = 1\n    while i &lt;= n:\n        somme += 1 / i\n        i += 1\n\n    return somme\n\n\n# Exemple d'utilisation\nresultat = sommation_inverse_while(10)\nprint(f\"La sommation est : {resultat}\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#explications","title":"Explications","text":"<ol> <li>D\u00e9finition de la Fonction : La fonction <code>sommation_inverse_while(n)</code> prend un entier <code>n</code> comme argument et    calcule la sommation des inverses de tous les entiers de 1 \u00e0 <code>n</code>.</li> <li>V\u00e9rification de <code>n</code> : La fonction v\u00e9rifie si n est inf\u00e9rieur \u00e0 1. Si c\u2019est le cas, elle retourne une valeur    de 0. On pourrait lancer une erreur \u00e0 la place avec <code>raise</code> (\u00e0 voir plus tard).</li> <li>Calcul de la Sommation : La sommation est calcul\u00e9e en utilisant une boucle <code>while</code> qui it\u00e8re sur tous les entiers    de 1 \u00e0 <code>n</code> (inclus). \u00c0 chaque it\u00e9ration, l\u2019inverse de l\u2019entier courant est ajout\u00e9 \u00e0 la somme.</li> <li>Retour de la Sommation : Une fois que tous les termes ont \u00e9t\u00e9 ajout\u00e9s, la fonction retourne la valeur de la    sommation.</li> <li>Exemple d\u2019Utilisation : Dans l\u2019exemple, nous calculons la sommation pour <code>n = 10</code>, ce qui donne une valeur    approximative de <code>2.9289682539682538</code>.</li> </ol> <p>Info</p> <p>Nous verrons dans le prochain chapitre une autre solution avec une boucle <code>for</code>.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#calcul-de-la-racine-carree-avec-une-boucle-while","title":"Calcul de la Racine Carr\u00e9e avec une Boucle <code>while</code>","text":"<p>Le calcul de la racine carr\u00e9e d\u2019un nombre peut \u00eatre abord\u00e9 de plusieurs mani\u00e8res, notamment en utilisant des m\u00e9thodes num\u00e9riques comme la m\u00e9thode de Newton-Raphson ou une simple it\u00e9ration pour approximer la racine carr\u00e9e. Ici, nous allons utiliser une m\u00e9thode simple bas\u00e9e sur l\u2019it\u00e9ration pour trouver une approximation de la racine carr\u00e9e d\u2019un nombre.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#probleme","title":"Probl\u00e8me","text":"<p>Le probl\u00e8me consiste \u00e0 trouver un nombre <code>x</code> tel que <code>x * x</code> soit \u00e9gal \u00e0 un nombre donn\u00e9 <code>n</code>. Cependant, pour des nombres non parfaits, il n\u2019existe pas de solution exacte en termes de nombres rationnels. Nous devons donc nous contenter d\u2019une approximation.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#fonction-python-pour-le-calcul-de-la-racine-carree","title":"Fonction Python pour le Calcul de la Racine Carr\u00e9e","text":"<p>Voici une fonction Python qui utilise une boucle <code>while</code> pour approximer la racine carr\u00e9e d\u2019un nombre en utilisant une m\u00e9thode simple d\u2019it\u00e9ration.</p> <pre><code>def racine_carree(n, precision=0.00001):\n    \"\"\"\n    Approxime la racine carr\u00e9e d'un nombre en utilisant une m\u00e9thode d'it\u00e9ration.\n\n    Arguments:\n    n -- nombre pour lequel calculer la racine carr\u00e9e.\n    precision -- pr\u00e9cision souhait\u00e9e pour l'approximation (par d\u00e9faut : 0.00001).\n\n    Retourne:\n    L'approximation de la racine carr\u00e9e.\n    \"\"\"\n    if n &lt; 0:\n        raise ValueError(\"La racine carr\u00e9e d'un nombre n\u00e9gatif n'est pas d\u00e9finie en nombres r\u00e9els.\")\n    elif n == 0 or n == 1:\n        return n  # Cas particuliers\n\n    # Initialisation de la valeur de d\u00e9part\n    x = n / 2.0\n    nouvelle_x = x + 1  # Pour garantir au moins une it\u00e9ration\n\n    # Boucle d'it\u00e9ration\n    while abs(x - nouvelle_x) &gt;= precision:\n        x = nouvelle_x\n        nouvelle_x = (x + n / x) / 2.0\n\n    return nouvelle_x\n\n\n# Exemple d'utilisation\nresultat = racine_carree(9)\nprint(f\"La racine carr\u00e9e de 9 est approximativement : {resultat}\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/11-while/#explications_1","title":"Explications","text":"<ol> <li> <p>D\u00e9finition de la Fonction : La fonction <code>racine_carree(n, precision)</code> prend deux arguments : le nombre <code>n</code> pour    lequel calculer la racine carr\u00e9e et la pr\u00e9cision souhait\u00e9e pour l\u2019approximation.</p> </li> <li> <p>V\u00e9rification des Cas Particuliers : Si <code>n</code> est n\u00e9gatif, la fonction l\u00e8ve une exception car la racine carr\u00e9e d\u2019un    nombre n\u00e9gatif n\u2019est pas d\u00e9finie en nombres r\u00e9els. Si <code>n</code> est 0 ou 1, la fonction retourne directement <code>n</code>, car ce    sont des cas simples.</p> </li> <li> <p>Initialisation des Valeurs : La valeur initiale <code>x</code> est fix\u00e9e \u00e0 <code>n / 2.0</code>, ce qui est une estimation raisonnable    pour commencer l\u2019it\u00e9ration. Pour garantir au moins une it\u00e9ration, <code>nouvelle_x</code> est initialis\u00e9e \u00e0 <code>x + 1</code>.</p> </li> <li> <p>Boucle d\u2019It\u00e9ration : La boucle <code>while</code> continue tant que la diff\u00e9rence absolue entre <code>x</code> et <code>nouvelle_x</code> est    sup\u00e9rieure ou \u00e9gale \u00e0 la pr\u00e9cision souhait\u00e9e. Cela signifie que l\u2019it\u00e9ration se poursuit jusqu\u2019\u00e0 ce que les    approximations successives soient suffisamment proches.</p> </li> <li> <p>Calcul de la Nouvelle Approximation : \u00c0 chaque it\u00e9ration, la valeur de <code>x</code> est mise \u00e0 jour avec la valeur    pr\u00e9c\u00e9dente de <code>nouvelle_x</code>. Ensuite, une nouvelle approximation <code>nouvelle_x</code> est calcul\u00e9e en utilisant la formule    <code>(x + n / x) / 2.0</code>, qui est une simplification de la m\u00e9thode de Newton-Raphson pour la racine carr\u00e9e.</p> </li> <li> <p>Retour de la Racine Carr\u00e9e : Une fois que la condition de pr\u00e9cision est satisfaite, la fonction retourne la    derni\u00e8re valeur de <code>nouvelle_x</code>, qui est l\u2019approximation finale de la racine carr\u00e9e.</p> </li> </ol> <p>Cette m\u00e9thode est efficace pour trouver une approximation pr\u00e9cise de la racine carr\u00e9e d\u2019un nombre en utilisant une boucle <code>while</code> avec une condition claire et concise.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/12-while-pyplot/","title":"12. Boucle <code>while</code> avec <code>pyplot</code>","text":"<p>Voici un exemple complet pour dessiner les points de la fonction \\(f(x) = 2x + 1\\) sur une figure 2D en utilisant <code>matplotlib.pyplot</code>. La boucle <code>while</code> incr\u00e9mente \\(x\\) de 1 \u00e0 chaque it\u00e9ration jusqu\u2019\u00e0 ce que \\(f(x) &gt; 20\\).</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/12-while-pyplot/#code-python","title":"Code Python","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Initialisation de la figure\nplt.figure(figsize=(4, 6))\n\n# D\u00e9finir la fonction f(x)\ndef f(x):\n    return 2 * x + 1\n\n# Initialisation de x\nx = 1\n\n# Boucle pour dessiner les points tant que y &lt;= 20\nwhile f(x) &lt;= 20:\n    y = f(x)\n    plt.plot(x, y, \"ob\")  # Dessiner le point (x, y)\n    x += 1\n\n# Ajouter des labels et un titre\nplt.title(\"Fonction f(x) = 2x + 1\", fontsize=14)\nplt.xlim(0, 10)\nplt.ylim(0, 20)\n\n# Afficher la grille et la figure\nplt.grid(True)\nplt.show()\n</code></pre> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/","title":"13. Boucle <code>for</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#introduction-aux-boucles-for","title":"Introduction aux Boucles <code>for</code>","text":"<p>Les boucles <code>for</code> sont un type de boucle en Python utilis\u00e9es pour it\u00e9rer sur des s\u00e9quences, telles que des listes, des tuples, des cha\u00eenes de caract\u00e8res ou des plages de nombres g\u00e9n\u00e9r\u00e9es par la fonction <code>range()</code>. Elles sont souvent appel\u00e9es \u201cboucles compt\u00e9es\u201d car elles permettent d\u2019ex\u00e9cuter un bloc de code un nombre fixe de fois, d\u00e9termin\u00e9 par la longueur de la s\u00e9quence sur laquelle elles it\u00e8rent.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#boucles-comptees","title":"Boucles Compt\u00e9es","text":"<p>Les boucles compt\u00e9es sont utiles lorsque vous savez \u00e0 l\u2019avance combien de fois vous souhaitez ex\u00e9cuter un bloc de code. Elles sont particuli\u00e8rement pratiques pour parcourir des collections de donn\u00e9es, comme des listes ou des tuples, o\u00f9 chaque \u00e9l\u00e9ment doit \u00eatre trait\u00e9 individuellement.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#comparaison-avec-les-boucles-while","title":"Comparaison avec les Boucles <code>while</code>","text":"<p>Les boucles <code>for</code> diff\u00e8rent des boucles <code>while</code> principalement par leur utilisation et leur syntaxe :</p> <ul> <li> <p>Boucles <code>while</code> :</p> <ul> <li>Utilis\u00e9es lorsque le nombre d\u2019it\u00e9rations n\u2019est pas connu \u00e0 l\u2019avance.</li> <li>La condition d\u2019arr\u00eat est \u00e9valu\u00e9e avant chaque it\u00e9ration.</li> <li>N\u00e9cessitent une gestion explicite de la variable d\u2019it\u00e9ration (par exemple, incr\u00e9menter une variable \u00e0 chaque   it\u00e9ration).</li> </ul> </li> <li> <p>Boucles <code>for</code> :</p> <ul> <li>Utilis\u00e9es lorsque le nombre d\u2019it\u00e9rations est connu ou d\u00e9termin\u00e9 par une s\u00e9quence.</li> <li>La variable d\u2019it\u00e9ration est automatiquement d\u00e9finie et incr\u00e9ment\u00e9e \u00e0 chaque it\u00e9ration.</li> <li>Plus pratiques pour it\u00e9rer sur des collections de donn\u00e9es.</li> </ul> </li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#exemple-de-boucle-for","title":"Exemple de Boucle <code>for</code>","text":"<p>Voici un exemple simple de boucle <code>for</code> qui it\u00e8re sur une liste de fruits et imprime chaque fruit :</p> <pre><code>fruits = [\"pomme\", \"poire\", \"abricot\"]\n\nfor fruit in fruits:\n    print(fruit)\n</code></pre> <p>Dans cet exemple, la boucle <code>for</code> it\u00e8re sur la liste <code>fruits</code>, affectant \u00e0 chaque it\u00e9ration la valeur de l\u2019\u00e9l\u00e9ment courant \u00e0 la variable <code>fruit</code>, puis imprime cette valeur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#utilisation-de-range","title":"Utilisation de <code>range()</code>","text":"<p>Pour it\u00e9rer sur une plage de nombres, vous pouvez utiliser la fonction <code>range()</code>, qui g\u00e9n\u00e8re une s\u00e9quence de nombres. Voici un exemple :</p> <pre><code>for i in range(5):\n    print(i)\n</code></pre> <p>Cette boucle <code>for</code> it\u00e8re sur les nombres de 0 \u00e0 4 (inclus), en imprimant chaque nombre \u00e0 chaque it\u00e9ration.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#avantages-des-boucles-for","title":"Avantages des Boucles <code>for</code>","text":"<p>Les boucles <code>for</code> sont g\u00e9n\u00e9ralement plus faciles \u00e0 lire et \u00e0 utiliser que les boucles <code>while</code> lorsque vous travaillez avec des s\u00e9quences ou des plages de nombres. Elles r\u00e9duisent le risque d\u2019erreurs li\u00e9es \u00e0 la gestion manuelle de la variable d\u2019it\u00e9ration et sont plus concises pour it\u00e9rer sur des collections de donn\u00e9es.</p> Citations <ul> <li>[1] https://www.w3schools.com/python/python_for_loops.asp</li> <li>[2] https://www.programiz.com/python-programming/for-loop</li> <li>[3] https://www.scaler.com/topics/difference-between-for-and-while-loop-in-python/</li> <li>[4] https://www.reddit.com/r/learnpython/comments/u88xcc/while_vs_for/</li> <li>[5] https://www.scholarhat.com/tutorial/python/difference-between-for-and-while-loop-in-python</li> <li>[6] https://www.simplilearn.com/tutorials/python-tutorial/python-for-loop</li> <li>[7] https://www.reddit.com/r/learnpython/comments/1e3rnvz/whats_the_difference_between_a_while_loop_and_a/</li> <li>[8] https://realpython.com/python-for-loop/</li> <li>[9] https://stackoverflow.com/questions/920645/when-to-use-while-or-for-in-python</li> <li>[10] https://www.reddit.com/r/learnpython/comments/p47d1n/can_not_understand_for_loops/</li> <li>[11] https://www.digitalocean.com/community/tutorials/python-for-loop-example</li> <li>[12] https://www.coursera.org/tutorials/for-loop-python</li> <li>[13] https://www.dataquest.io/blog/python-for-loop-tutorial/</li> <li>[14] https://www.learnpython.org/en/Loops</li> <li>[15] https://www.youtube.com/watch?v=dHANJ4l6fwA</li> <li>[16] https://www.youtube.com/watch?v=I269TjuEVQA</li> <li>[17] https://www.youtube.com/watch?v=WPF5M_Ic6Fc</li> <li>[18] https://www.youtube.com/watch?v=3IMHXlyulO8</li> <li>[19] https://www.youtube.com/watch?v=g1AFlLhgMR8</li> <li>[20] https://wiki.python.org/moin/ForLoop</li> <li>[21] https://www.youtube.com/watch?v=KWgYha0clzw</li> <li>[22] https://www.simplilearn.com/tutorials/python-tutorial/python-loops</li> <li>[23] https://www.ibm.com/reference/python/for-loop</li> <li>[24] https://www.w3schools.com/python/python_while_loops.asp</li> <li>[25] https://www.linode.com/docs/guides/python-for-and-while-loops/</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#calcul-dune-sommation-avec-un-for","title":"Calcul d\u2019une sommation avec un <code>for</code>","text":"<p>Voici une version de cette fonction qui utilise une boucle  <code>for</code> \u00e0 la place de la boucle <code>while</code> pour calculer la sommation \\(\\sum_{i=1}^{n} \\frac{1}{i}\\).</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#fonction-avec-boucle-for","title":"Fonction avec Boucle <code>for</code>","text":"<pre><code>def sommation_inverse_for(n):\n    \"\"\"\n    Calcule la sommation \\sum_{i=1}^{n} 1/i en utilisant une boucle for.\n\n    Arguments:\n    n -- entier positif repr\u00e9sentant la limite sup\u00e9rieure de la sommation.\n\n    Retourne:\n    La valeur de la sommation.\n    \"\"\"\n    if n &lt; 1:\n        return 0\n\n    somme = 0\n    for i in range(1, n + 1):\n        somme += 1 / i\n\n    return somme\n\n\n# Exemple d'utilisation\nresultat = sommation_inverse_for(10)\nprint(f\"La sommation est : {resultat}\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#explications","title":"Explications","text":"<ol> <li> <p>D\u00e9finition de la Fonction : La fonction <code>sommation_inverse_for(n)</code> prend un entier <code>n</code> comme argument et calcule    la sommation des inverses de tous les entiers de 1 \u00e0 <code>n</code>.</p> </li> <li> <p>V\u00e9rification de <code>n</code> : Si <code>n</code> est inf\u00e9rieur \u00e0 1, la fonction retourne 0, car la sommation n\u2019est pas d\u00e9finie pour    <code>n &lt; 1</code>.</p> </li> <li> <p>Boucle <code>for</code> : La boucle <code>for</code> utilise la fonction <code>range(1, n + 1)</code> pour g\u00e9n\u00e9rer une s\u00e9quence de nombres de 1 \u00e0    <code>n</code> (inclus). \u00c0 chaque it\u00e9ration, l\u2019inverse de l\u2019entier courant est ajout\u00e9 \u00e0 la somme.</p> </li> <li> <p>Retour de la Sommation : Une fois que tous les termes ont \u00e9t\u00e9 ajout\u00e9s, la fonction retourne la valeur de la    sommation.</p> </li> <li> <p>Exemple d\u2019Utilisation : Dans l\u2019exemple, nous calculons la sommation pour <code>n = 10</code>, ce qui donne une valeur    approximative de 2.9289682539682538.</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/13-for/#avantages-de-la-boucle-for","title":"Avantages de la Boucle <code>for</code>","text":"<p>Dans ce cas, la boucle <code>for</code> est plus concise et plus facile \u00e0 lire que la boucle <code>while</code>, car elle \u00e9vite la gestion manuelle de la variable d\u2019it\u00e9ration (<code>i</code>). La fonction <code>range()</code> g\u00e9n\u00e8re automatiquement la s\u00e9quence de nombres, ce qui rend le code plus \u00e9l\u00e9gant et moins susceptible d\u2019erreurs.</p> Utilisation de l\u2019IA <pre><code>Page r\u00e9dig\u00e9e en partie avec l'aide d'un assistant IA, principalement \u00e0 l'aide de Perplexity AI, avec le *LLM*\n**Claude 3.5 Sonnet**. L'IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de\nstructure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l'auteur.\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/","title":"14. La fonction <code>range</code>","text":"<p>La fonction <code>range()</code> est une fonction int\u00e9gr\u00e9e en Python qui g\u00e9n\u00e8re une s\u00e9quence de nombres entiers. Elle est couramment utilis\u00e9e dans les boucles <code>for</code> pour it\u00e9rer sur une plage de valeurs. Cette fonction est tr\u00e8s flexible gr\u00e2ce \u00e0 ses trois param\u00e8tres : <code>start</code>, <code>stop</code> et <code>step</code>.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#syntaxe-de-range","title":"Syntaxe de <code>range()</code>","text":"<pre><code>range(start, stop, step)\n</code></pre> <ul> <li><code>start</code> (optionnel) : La valeur de d\u00e9part de la s\u00e9quence (incluse). Par d\u00e9faut, elle est \u00e9gale \u00e0 0.</li> <li><code>stop</code> (obligatoire) : La valeur o\u00f9 la s\u00e9quence s\u2019arr\u00eate (non incluse).</li> <li><code>step</code> (optionnel) : L\u2019incr\u00e9ment entre chaque valeur de la s\u00e9quence. Par d\u00e9faut, il est \u00e9gal \u00e0 1.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#differents-cas-dutilisation","title":"Diff\u00e9rents Cas d\u2019Utilisation","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#1-un-seul-parametre-stop","title":"1. Un seul param\u00e8tre (<code>stop</code>)","text":"<p>Si un seul param\u00e8tre est fourni, il est interpr\u00e9t\u00e9 comme la valeur de <code>stop</code>. La s\u00e9quence commence alors \u00e0 0 et s\u2019incr\u00e9mente de 1 jusqu\u2019\u00e0 (mais sans inclure) <code>stop</code>.</p> <pre><code>for i in range(5):\n    print(i)\n# Affiche : 0, 1, 2, 3, 4\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#2-deux-parametres-start-stop","title":"2. Deux param\u00e8tres (<code>start</code>, <code>stop</code>)","text":"<p>Avec deux param\u00e8tres, la s\u00e9quence commence \u00e0 <code>start</code> et s\u2019arr\u00eate avant <code>stop</code>.</p> <pre><code>for i in range(2, 6):\n    print(i)\n# Affiche : 2, 3, 4, 5\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#3-trois-parametres-start-stop-step","title":"3. Trois param\u00e8tres (<code>start</code>, <code>stop</code>, <code>step</code>)","text":"<p>Avec trois param\u00e8tres, la s\u00e9quence commence \u00e0 <code>start</code>, s\u2019arr\u00eate avant <code>stop</code>, et utilise l\u2019incr\u00e9ment sp\u00e9cifi\u00e9 par <code>step</code>.</p> <pre><code>for i in range(1, 10, 2):\n    print(i)\n# Affiche : 1, 3, 5, 7, 9\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#4-valeur-negative-pour-step","title":"4. Valeur n\u00e9gative pour <code>step</code>","text":"<p>Si le param\u00e8tre <code>step</code> est n\u00e9gatif, la s\u00e9quence d\u00e9cro\u00eet. Dans ce cas, il faut que <code>start</code> soit plus grand que <code>stop</code>.</p> <pre><code>for i in range(10, 0, -2):\n    print(i)\n# Affiche : 10, 8, 6, 4, 2\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#comparaison-avec-une-boucle-while","title":"Comparaison avec une Boucle <code>while</code>","text":"<p>Voici un exemple o\u00f9 nous utilisons une boucle <code>while</code> pour reproduire le comportement de <code>range()</code> :</p> <p>Avec une boucle <code>while</code> :</p> <pre><code>i = 1\nwhile i &lt; 10:\n    print(i)\n    i += 2\n# Affiche : 1, 3, 5, 7, 9\n</code></pre> <p>Avec une boucle <code>for</code> et <code>range()</code> :</p> <pre><code>for i in range(1, 10, 2):\n    print(i)\n# Affiche : 1, 3, 5, 7, 9\n</code></pre> <p>La boucle <code>for</code> avec <code>range()</code> est plus concise et r\u00e9duit les erreurs li\u00e9es \u00e0 la gestion manuelle de l\u2019incr\u00e9mentation.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#exemples-pratiques-avec-des-boucles-for","title":"Exemples Pratiques avec des Boucles <code>for</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#exemple-1-calculer-une-sommation-simple","title":"Exemple 1 : Calculer une sommation simple","text":"<pre><code>somme = 0\nfor i in range(1, 6):  # It\u00e8re sur les nombres de 1 \u00e0 (6-1)\n    somme += i\nprint(f\"La somme des nombres de 1 \u00e0 5 est {somme}\")\n# Affiche : La somme des nombres de 1 \u00e0 5 est 15\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#exemple-2-iteration-avec-un-pas-negatif","title":"Exemple 2 : It\u00e9ration avec un pas n\u00e9gatif","text":"<pre><code>for i in range(10, -1, -2):  # Compte \u00e0 rebours par pas de -2\n    print(i)\n# Affiche : 10, 8, 6, 4, 2, 0\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#exemple-3-table-de-multiplication","title":"Exemple 3 : Table de multiplication","text":"<pre><code>n = int(input(\"Entrez un nombre pour voir sa table de multiplication : \"))\nfor i in range(1, 11):  # It\u00e8re sur les nombres de 1 \u00e0 (11-1)\n    print(f\"{n} x {i} = {n * i}\")\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/14-range/#points-cles","title":"Points Cl\u00e9s","text":"<ul> <li>La fonction <code>range()</code> g\u00e9n\u00e8re des s\u00e9quences efficaces en m\u00e9moire car elle ne cr\u00e9e pas r\u00e9ellement une liste mais g\u00e9n\u00e8re   les valeurs \u201c\u00e0 la vol\u00e9e\u201d.</li> <li>Les param\u00e8tres optionnels permettent un contr\u00f4le pr\u00e9cis sur le d\u00e9but (<code>start</code>), la fin (<code>stop</code>) et l\u2019incr\u00e9ment (   <code>step</code>) de la s\u00e9quence.</li> <li>Elle simplifie consid\u00e9rablement les boucles compt\u00e9es par rapport aux boucles manuelles avec des variables d\u2019it\u00e9ration.</li> </ul> <p>En r\u00e9sum\u00e9, la fonction <code>range()</code> est un outil puissant et flexible pour contr\u00f4ler les boucles en Python.</p> Citations <ul> <li>[1] https://pynative.com/python-range-function/</li> <li>[2] https://www.w3schools.com/python/gloss_python_for_range.asp</li> <li>[3] https://www.w3schools.com/python/ref_func_range.asp</li> <li>[4] https://sparkbyexamples.com/python/range-in-for-loop-in-python/</li> <li>[5] https://realpython.com/python-range/</li> <li>[6] https://www.freecodecamp.org/news/python-for-loop-for-i-in-range-example/</li> <li>[7] https://cs.stanford.edu/people/nick/py/python-range.html</li> <li>[8] https://mimo.org/glossary/python/range-function</li> <li>[9] https://stackoverflow.com/questions/71625642/python-range-and-for-loop-understanding</li> <li>[10] https://www.snakify.org/lessons/for_loop_range/</li> <li>[11] https://www.datacamp.com/tutorial/python-range-function</li> <li>[12] https://www.datacamp.com/tutorial/python-for-i-in-range</li> <li>[13] https://www.coursera.org/tutorials/python-range</li> <li>[14] https://www.freecodecamp.org/news/python-range-function-example/</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/15-for-pyplot/","title":"15. Boucle <code>for</code> avec <code>pyplot</code>","text":"<p>Voici l\u2019exemple de boucle <code>while</code> qui place des points sur une figure selon la fonction \\(f(x) = 2x + 1\\), qui a \u00e9t\u00e9 r\u00e9\u00e9crit pour utiliser une boucle <code>for</code> \u00e0 la place. Le r\u00e9sultat est le m\u00eame. </p> <p>Mais il y a une diff\u00e9rence fondamentale : une boucle <code>for</code> est utilis\u00e9e pour it\u00e9rer sur une plage de valeurs de <code>x</code> allant de 1 \u00e0 9 (car <code>range(1, 10)</code> g\u00e9n\u00e8re des nombres de 1 \u00e0 9 inclusivement), tandis que la premi\u00e8re version utilisait une boucle <code>while</code> et g\u00e9n\u00e9rait  des points jusqu\u2019\u00e0 ce que la valeur de <code>y</code> d\u00e9passe 20. Avec le <code>for</code>, on d\u00e9cide d\u2019avance combien de points vont \u00eatre  plac\u00e9s sur la figure en donnant les bons arguments \u00e0 la fonction <code>range</code>, mais avec le <code>while</code>, on en sait pas  exactement combien de points vont \u00eatre plac\u00e9s sur la figure parce que la d\u00e9cision d\u2019arr\u00eater est bas\u00e9e sur la valeur de  <code>y</code> et non le nombre de points. Dans cet exemple, les arguments de <code>range</code> ont \u00e9t\u00e9 choisis express\u00e9ment pour obtenir  le m\u00eame r\u00e9sultat. </p> <pre><code>import matplotlib.pyplot as plt\n\n# Initialisation de la figure\nplt.figure(figsize=(4, 6))\n\n\n# D\u00e9finir la fonction f(x)\ndef f(x):\n    return 2 * x + 1\n\n# Boucle pour dessiner les points\nfor x in range(1, 10):\n    y = f(x)\n    plt.plot(x, y, \"ob\")  # Dessiner le point (x, y)\n\n# Ajouter des labels et un titre\nplt.title(\"Fonction f(x) = 2x + 1\", fontsize=14)\nplt.xlim(0, 10)\nplt.ylim(0, 20)\n\n# Afficher la grille et la figure\nplt.grid(True)\nplt.show()\n</code></pre> <p></p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/","title":"16. Les fonctions <code>arange</code> et <code>linspace</code> de <code>numpy</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#la-fonction-arange-de-numpy","title":"La fonction <code>arange</code> de NumPy","text":"<p>La fonction <code>arange</code> de NumPy est utilis\u00e9e pour cr\u00e9er un tableau de valeurs espac\u00e9es r\u00e9guli\u00e8rement dans une plage sp\u00e9cifi\u00e9e. Elle est similaire \u00e0 la fonction int\u00e9gr\u00e9e <code>range</code> de Python, mais elle retourne un tableau NumPy au lieu d\u2019un objet <code>range</code> ou d\u2019une liste.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#syntaxe-et-parametres","title":"Syntaxe et Param\u00e8tres","text":"<p>La syntaxe de <code>arange</code> est la suivante :</p> <pre><code>numpy.arange([start, ] stop, [step, ] dtype = None)\n</code></pre> <ul> <li>start : La valeur de d\u00e9part de la plage. Si non sp\u00e9cifi\u00e9e, elle est par d\u00e9faut \u00e0 0.</li> <li>stop : La valeur de fin de la plage (exclue).</li> <li>step : L\u2019incr\u00e9ment entre chaque valeur. Par d\u00e9faut, il est \u00e0 1.</li> <li>dtype : Le type de donn\u00e9es du tableau de sortie. Si non sp\u00e9cifi\u00e9, il est d\u00e9termin\u00e9 automatiquement \u00e0 partir des   autres param\u00e8tres.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#exemples-dutilisation","title":"Exemples d\u2019utilisation","text":"<pre><code>import numpy as np\n\n# Exemple 1 : Cr\u00e9er un tableau avec des valeurs de 0 \u00e0 9\narr1 = np.arange(10)\nprint(arr1)  # Output: [0 1 2 3 4 5 6 7 8 9]\n\n# Exemple 2 : Cr\u00e9er un tableau avec des valeurs de 5 \u00e0 10 (exclusif)\narr2 = np.arange(5, 10)\nprint(arr2)  # Output: [5 6 7 8 9]\n\n# Exemple 3 : Cr\u00e9er un tableau avec un pas personnalis\u00e9\narr3 = np.arange(5, 15, 2)\nprint(arr3)  # Output: [ 5  7  9 11 13]\n\n# Exemple 4 : Cr\u00e9er un tableau avec des valeurs flottantes\narr4 = np.arange(1.5, 5.5, 0.5)\nprint(arr4)  # Output: [1.5 2.  2.5 3.  3.5 4.  4.5 5. ]\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#comparaison-avec-la-fonction-range","title":"Comparaison avec la fonction <code>range</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#similitudes","title":"Similitudes","text":"<ul> <li>Les deux fonctions g\u00e9n\u00e8rent des s\u00e9quences de nombres.</li> <li>Elles acceptent des param\u00e8tres similaires : <code>start</code>, <code>stop</code>, et <code>step</code>.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#differences","title":"Diff\u00e9rences","text":"<ul> <li>Type de retour : <code>range</code> retourne un objet <code>range</code> (un g\u00e9n\u00e9rateur en Python 3), tandis que <code>arange</code> retourne un   tableau NumPy.</li> <li>Support des flottants : <code>range</code> ne prend en charge que les entiers, alors que <code>arange</code> peut g\u00e9rer des valeurs   flottantes.</li> <li>Utilisation de la m\u00e9moire : <code>range</code> est plus l\u00e9ger car il ne stocke pas toutes les valeurs en m\u00e9moire,   contrairement \u00e0 <code>arange</code> qui cr\u00e9e un tableau complet.</li> <li>Performances : Pour les grandes s\u00e9quences, les op\u00e9rations vectoris\u00e9es de NumPy sont g\u00e9n\u00e9ralement plus rapides,   mais si vous devez it\u00e9rer explicitement, <code>range</code> peut \u00eatre plus efficace en termes de m\u00e9moire et de vitesse[4].</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#choix-entre-range-et-arange","title":"Choix entre <code>range</code> et <code>arange</code>","text":"<ul> <li>Utilisez <code>range</code> pour des it\u00e9rations simples sur des entiers ou pour des boucles o\u00f9 la m\u00e9moire est limit\u00e9e.</li> <li>Utilisez <code>arange</code> lorsque vous avez besoin de travailler avec des tableaux NumPy, notamment pour des calculs   vectoris\u00e9s ou pour des valeurs flottantes.</li> </ul> Citations <ul> <li>[1] https://sparkbyexamples.com/python/numpy-arange-function/</li> <li>[2] https://www.reddit.com/r/learnpython/comments/3g0hiz/difference_between_range_and_arange/</li> <li>[3] https://www.programiz.com/python-programming/numpy/methods/arange</li> <li>[4] https://stackoverflow.com/questions/10698858/built-in-range-or-numpy-arange-which-is-more-efficient</li> <li>[5] https://numpy.org/doc/2.1/reference/generated/numpy.arange.html</li> <li>[6] https://pieriantraining.com/range-vs-arange-choosing-the-right-tool-for-your-python-code/</li> <li>[7] https://realpython.com/how-to-use-numpy-arange/</li> <li>[8] https://www.youtube.com/watch?v=Cs1oAnMZlWs</li> <li>[9] https://www.w3resource.com/numpy/array-creation/arange.php</li> <li>[10] https://www.youtube.com/watch?v=EgKkb1MXzTk</li> <li>[11] https://ioflood.com/blog/numpy-np-arange/</li> <li>[12] https://www.youtube.com/watch?v=Vx2iye1x7wg</li> <li>[13] https://www.youtube.com/watch?v=uy2FF8KSj-E</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#la-fonction-linspace-de-numpy","title":"La fonction <code>linspace</code> de NumPy","text":"<p>La fonction <code>linspace</code> de NumPy est utilis\u00e9e pour g\u00e9n\u00e9rer un tableau de nombres espac\u00e9s r\u00e9guli\u00e8rement entre deux valeurs sp\u00e9cifi\u00e9es. Elle est particuli\u00e8rement utile lorsque vous avez besoin d\u2019un nombre pr\u00e9cis de points entre deux valeurs, ce qui est souvent le cas pour le trac\u00e9 de courbes ou la simulation num\u00e9rique.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#syntaxe-et-parametres_1","title":"Syntaxe et Param\u00e8tres","text":"<p>La syntaxe de <code>linspace</code> est la suivante :</p> <pre><code>numpy.linspace(start, stop, num, endpoint=True, retstep=False, dtype=None, axis=0)\n</code></pre> <ul> <li>start : La valeur de d\u00e9part de la plage.</li> <li>stop : La valeur de fin de la plage.</li> <li>num : Le nombre de valeurs \u00e0 g\u00e9n\u00e9rer entre <code>start</code> et <code>stop</code>. Par d\u00e9faut, il est \u00e0 50.</li> <li>endpoint : Un flag bool\u00e9en indiquant si <code>stop</code> doit \u00eatre inclus dans la s\u00e9quence. Par d\u00e9faut, il est \u00e0 <code>True</code>.</li> <li>retstep : Un flag bool\u00e9en indiquant si la fonction doit retourner le pas calcul\u00e9 entre les valeurs. Par d\u00e9faut, il   est \u00e0 <code>False</code>.</li> <li>dtype : Le type de donn\u00e9es du tableau de sortie. Si non sp\u00e9cifi\u00e9, il est d\u00e9termin\u00e9 automatiquement \u00e0 partir des   autres param\u00e8tres.</li> <li>axis : Si <code>start</code> et <code>stop</code> sont des tableaux, cet argument sp\u00e9cifie sur quel axe les valeurs seront ajout\u00e9es. Par   d\u00e9faut, il est \u00e0 0.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#exemples-dutilisation_1","title":"Exemples d\u2019utilisation","text":"<pre><code>import numpy as np\n\n# Exemple 1 : Cr\u00e9er un tableau avec 5 valeurs entre 0 et 1\narr1 = np.linspace(0, 1, 5)\nprint(arr1)  # Output: [0.  0.25 0.5  0.75 1.  ]\n\n# Exemple 2 : Cr\u00e9er un tableau avec 5 valeurs entre 0 et 1, sans inclure la valeur de fin\narr2 = np.linspace(0, 1, 5, endpoint=False)\nprint(arr2)  # Output: [0.   0.2  0.4  0.6  0.8]\n\n# Exemple 3 : Cr\u00e9er un tableau avec 5 valeurs entre 0 et 2\u03c0 pour un trac\u00e9 de courbe sinuso\u00efdale\nx = np.linspace(0, 2 * np.pi, 5)\ny = np.sin(x)\nprint(x)  # Output: [0.         1.57079633 3.14159265 4.71238898 6.28318531]\nprint(y)  # Output: [ 0.         1.         0.        -1.         0.        ]\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#comparaison-avec-la-fonction-arange","title":"Comparaison avec la fonction <code>arange</code>","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#similitudes_1","title":"Similitudes","text":"<ul> <li>Les deux fonctions g\u00e9n\u00e8rent des s\u00e9quences de nombres.</li> <li>Elles acceptent des param\u00e8tres similaires pour le d\u00e9but et la fin de la s\u00e9quence.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#differences_1","title":"Diff\u00e9rences","text":"<ul> <li>Nombre de valeurs vs. pas : <code>linspace</code> permet de sp\u00e9cifier le nombre de valeurs \u00e0 g\u00e9n\u00e9rer (<code>num</code>), tandis que   <code>arange</code> permet de sp\u00e9cifier le pas entre les valeurs (<code>step</code>).</li> <li>Inclusion de la valeur de fin : <code>linspace</code> inclut par d\u00e9faut la valeur de fin (<code>endpoint=True</code>), alors que   <code>arange</code> exclut la valeur de fin.</li> <li>Pr\u00e9cision pour les flottants : <code>linspace</code> est plus pr\u00e9cis pour les s\u00e9quences de nombres flottants car il garantit   que les valeurs de d\u00e9but et de fin sont incluses, ce qui r\u00e9duit les erreurs de pr\u00e9cision li\u00e9es aux flottants.</li> <li>Performances : <code>arange</code> est g\u00e9n\u00e9ralement plus rapide car il utilise une progression arithm\u00e9tique simple, tandis   que <code>linspace</code> effectue des calculs suppl\u00e9mentaires pour garantir l\u2019inclusion des valeurs de d\u00e9but et de fin.</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/16-arange-linspace/#choix-entre-linspace-et-arange","title":"Choix entre <code>linspace</code> et <code>arange</code>","text":"<ul> <li>Utilisez <code>linspace</code> lorsque vous avez besoin d\u2019un nombre pr\u00e9cis de points entre deux valeurs, comme pour le trac\u00e9 de   courbes ou la simulation num\u00e9rique.</li> <li>Utilisez <code>arange</code> lorsque vous avez besoin d\u2019un pas sp\u00e9cifique entre les valeurs, comme pour l\u2019it\u00e9ration ou l\u2019   indexation.</li> </ul> Citations <ul> <li>[1] https://fritz.ai/exploring-numpys-linspace-function/</li> <li>[2] https://www.codecademy.com/resources/docs/numpy/built-in-functions/linspace</li> <li>[3] https://www.statology.org/numpy-linspace-vs-arange/</li> <li>[4] https://www.boardinfinity.com/blog/python-numpy-linspace/</li> <li>[5] https://www.h2kinfosys.com/blog/create-a-range-of-numbers-as-an-array/</li> <li>[6] https://www.programiz.com/python-programming/numpy/methods/linspace</li> <li>[7] https://stackoverflow.com/questions/62106028/what-is-the-difference-between-np-linspace-and-np-arange</li> <li>[8] https://realpython.com/np-linspace-numpy/</li> <li>[9] https://note.nkmk.me/en/python-numpy-arange-linspace/</li> <li>[10] https://www.thepythoncodingstack.com/p/difference-between-numpy-arange-and-linspace</li> <li>[11] https://www.w3resource.com/numpy/array-creation/linspace.php</li> <li>[12] https://docs.vultr.com/python/third-party/numpy/linspace</li> <li>[13] https://numpy.org/doc/2.1/reference/generated/numpy.linspace.html</li> <li>[14] https://www.sharpsightlabs.com/blog/numpy-linspace/</li> <li>[15] https://www.mathworks.com/help/matlab/ref/double.linspace.html</li> <li>[16] https://www.youtube.com/watch?v=dRnUT5vVziU</li> <li>[17] https://www.youtube.com/watch?v=9bHtS2tTLjI</li> <li>[18] https://www.datacamp.com/tutorial/how-to-use-the-numpy-linspace-function</li> <li>[19] https://ioflood.com/blog/np-linspace/</li> <li>[20] https://python.plainenglish.io/title-numpy-linspace-vs-arange-which-to-choose-for-evenly-spaced-sequences-7ffb36ad98ca</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/17-linspace-pyplot/","title":"17. Fonction <code>linpspace</code> avec <code>pyplot</code>","text":"<p>Voici un autre exemple de figure comprenant des points calcul\u00e9s \u00e0 partir d\u2019une fonction, mais dans ce cas-ci en utilisant la fonction <code>linspace</code> de <code>numpy</code>.</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Initialisation de la figure\nplt.figure(figsize=(8, 2))\n\nx = np.linspace(0, 2 * np.pi, 20)\ny = np.sin(x)\n\nplt.plot(x, y, \"ob\")\n\n# Ajouter des labels et un titre\nplt.title(\"y = sin x\", fontsize=14)\nplt.xlim(-1, np.ceil(2 * np.pi))\nplt.ylim(-1.1, 1.1)\n\n# Afficher la grille et la figure\nplt.grid(True)\nplt.show()\n</code></pre> <p></p> <p>Exercice</p> <ul> <li>Modifiez le format de <code>\"ob\"</code> vers <code>\"-b\"</code> ou <code>\".--b\"</code>. </li> <li>Diminuez le nombre de points de 20 \u00e0 10 ou \u00e0 5, ou augmentez-le \u00e0 30 our 40.</li> <li>Serait-ce pr\u00e9f\u00e9rable d\u2019utiliser <code>21</code> \u00e0 la place de <code>20</code> pour le nombre de points ? Ou <code>31</code> \u00e0 la place de <code>30</code> ?</li> <li>Pourquoi n\u2019est-il pas n\u00e9cessaire de faire une boucle pour dessiner les points dans cet exemple ?</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/17-linspace-pyplot/#explications-du-code","title":"Explications du code","text":"<p>Ce programme Python utilise les biblioth\u00e8ques NumPy et Matplotlib pour tracer une courbe repr\u00e9sentant la fonction \\(y = \\sin(x)\\) avec des points espac\u00e9s r\u00e9guli\u00e8rement entre \\(0\\) et \\(2\\pi\\).</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/17-linspace-pyplot/#etapes-du-programme","title":"\u00c9tapes du programme","text":"<ol> <li> <p>Importation des biblioth\u00e8ques :</p> <ul> <li><code>numpy</code> est utilis\u00e9 pour les calculs num\u00e9riques, notamment pour g\u00e9n\u00e9rer des valeurs de \\(x\\) et   calculer \\(y = \\sin(x)\\).</li> <li><code>matplotlib.pyplot</code> est utilis\u00e9 pour cr\u00e9er et personnaliser des graphiques.</li> </ul> </li> <li> <p>Initialisation de la figure :</p> <ul> <li><code>plt.figure(figsize=(8, 2))</code> cr\u00e9e une figure avec une taille personnalis\u00e9e (8 unit\u00e9s de largeur et 2 unit\u00e9s de   hauteur).</li> </ul> </li> <li> <p>Cr\u00e9ation des donn\u00e9es :</p> <ul> <li><code>np.linspace(0, 2 * np.pi, 20)</code> g\u00e9n\u00e8re un tableau contenant 20 valeurs uniform\u00e9ment espac\u00e9es entre \\(0\\)   et \\(2\\pi\\). Ces valeurs repr\u00e9sentent les coordonn\u00e9es \\(x\\).</li> <li><code>np.sin(x)</code> calcule les valeurs correspondantes de \\(y = \\sin(x)\\) pour chaque valeur de \\(x\\).</li> </ul> </li> <li> <p>Trac\u00e9 des points :</p> <ul> <li><code>plt.plot(x, y, \"ob\")</code> trace les points sur le graphique. Le format <code>\"ob\"</code> signifie :<ul> <li><code>\"o\"</code> : les points sont repr\u00e9sent\u00e9s par des cercles.</li> <li><code>\"b\"</code> : la couleur des cercles est bleue.</li> </ul> </li> </ul> </li> <li> <p>Ajout du titre et personnalisation des axes :</p> <ul> <li><code>plt.title(\"y = sin x\", fontsize=14)</code> ajoute un titre au graphique avec une taille de police de 14.</li> <li><code>plt.xlim(-1, np.ceil(2 * np.pi))</code> d\u00e9finit les limites de l\u2019axe \\(x\\) entre \\(-1\\) et la valeur arrondie \u00e0   l\u2019entier sup\u00e9rieur de \\(2\\pi\\).</li> <li><code>plt.ylim(-1.1, 1.1)</code> d\u00e9finit les limites de l\u2019axe \\(y\\) entre \\(-1.1\\) et \\(1.1\\), ce qui permet d\u2019inclure tous   les points.</li> </ul> </li> <li> <p>Affichage d\u2019une grille :</p> <ul> <li><code>plt.grid(True)</code> ajoute une grille au graphique pour faciliter la lecture des valeurs.</li> </ul> </li> <li> <p>Affichage du graphique :</p> <ul> <li><code>plt.show()</code> affiche le graphique final.</li> </ul> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/17-linspace-pyplot/#resultat","title":"R\u00e9sultat","text":"<p>Le programme g\u00e9n\u00e8re un graphique o\u00f9 :</p> <ul> <li>Les points bleus repr\u00e9sentent les valeurs calcul\u00e9es de \\(y = \\sin(x)\\) pour 20 positions de \\(x\\) entre \\(0\\)   et \\(2\\pi\\).</li> <li>Une grille est affich\u00e9e pour am\u00e9liorer la lisibilit\u00e9.</li> <li>Les axes \\(x\\) et \\(y\\) sont ajust\u00e9s pour inclure tous les points.</li> </ul> <p>L\u2019image attach\u00e9e montre le r\u00e9sultat attendu : un trac\u00e9 discret en forme d\u2019onde sinuso\u00efdale avec des points bleus sur un fond quadrill\u00e9.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/","title":"18. Boucles imbriqu\u00e9es","text":"<p>Les boucles imbriqu\u00e9es sont un concept important en programmation, particuli\u00e8rement utile pour traiter des donn\u00e9es multidimensionnelles ou r\u00e9p\u00e9ter des actions de mani\u00e8re it\u00e9rative selon plusieurs crit\u00e8res. Voici une introduction aux boucles imbriqu\u00e9es en Python, illustr\u00e9e par un exemple de table de multiplication.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/#introduction-aux-boucles-imbriquees","title":"Introduction aux boucles imbriqu\u00e9es","text":"<p>Une boucle imbriqu\u00e9e est une boucle plac\u00e9e \u00e0 l\u2019int\u00e9rieur d\u2019une autre boucle. La boucle ext\u00e9rieure contr\u00f4le le nombre d\u2019it\u00e9rations de la boucle int\u00e9rieure. Chaque fois que la boucle ext\u00e9rieure effectue une it\u00e9ration, la boucle int\u00e9rieure s\u2019ex\u00e9cute enti\u00e8rement[1].</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/#exemple-table-de-multiplication","title":"Exemple : Table de multiplication","text":"<p>Voici un exemple simple de boucles imbriqu\u00e9es pour cr\u00e9er une table de multiplication de 1 \u00e0 10 :</p> <pre><code>for i in range(1, 11):\n    for j in range(1, 11):\n        print(f\"{i * j:4}\", end=\"\")\n    print()  # Nouvelle ligne apr\u00e8s chaque rang\u00e9e\n</code></pre> <p>Dans cet exemple :</p> <ul> <li>La boucle ext\u00e9rieure (<code>for i in range(1, 11)</code>) contr\u00f4le les lignes de la table.</li> <li>La boucle int\u00e9rieure (<code>for j in range(1, 11)</code>) g\u00e8re les colonnes.</li> <li><code>print(f\"{i * j:4}\", end=\"\")</code> affiche le produit de <code>i</code> et <code>j</code>, format\u00e9 pour occuper 4 espaces.</li> <li>Le <code>print()</code> apr\u00e8s la boucle int\u00e9rieure cr\u00e9e une nouvelle ligne apr\u00e8s chaque rang\u00e9e[5].</li> </ul> <p>Ce code produira une table de multiplication 10x10, o\u00f9 chaque cellule contient le produit des indices de sa ligne et de sa colonne[6].</p> <p>Exercice</p> <p>D\u00e9finissez une fonction pour afficher une table de multiplication de taille \\(n\\times n\\). La fonction doit accepter un param\u00e8tre <code>n</code> qui doit \u00eatre plus grand que 0. Sinon, rien ne doit \u00eatre affich\u00e9.</p> <p>Les boucles imbriqu\u00e9es sont tr\u00e8s utiles pour traiter des structures de donn\u00e9es \u00e0 plusieurs dimensions ou pour effectuer des op\u00e9rations complexes n\u00e9cessitant plusieurs niveaux d\u2019it\u00e9ration[1][2].</p> Citations <ul> <li>[1] https://v2.ttrinfo.be/articles/programmation/python/boucles/python-boucles-imbriquees/</li> <li>[2] https://www.fil.univ-lille.fr/~L1S1Info/last/cours/064-for.html</li> <li>[3] https://www-info.iutv.univ-paris13.fr/~santini/M1102_2017_2018/2017_2018_M1102_Intro_Algo/ch10_coursExercices.pdf</li> <li>[4] https://r.qcbs.ca/workshop05/book-fr/boucles-for-dans-des-boucles-for..html</li> <li>[5] https://www.elephorm.com/formation/code-data/c/apprendre-la-programmation-c/creer-une-table-de-multiplication-avec-une-boucle-en-c</li> <li>[6] https://v2.ttrinfo.be/articles/programmation/python/boucles/python-boucles-imbriquees/python-boucles-imbriquees.pdf</li> <li>[7] http://ressources.unit.eu/cours/Cfacile/co/Chap5_p8.html</li> <li>[8] http://coursphysiquetsi.e-monsite.com/medias/files/cours-1.pdf</li> <li>[9] https://abs.traduc.org/abs-5.3-fr/ch10s02.html</li> <li>[10] https://cscircles.cemc.uwaterloo.ca/tag/boucles-imbriquees/</li> <li>[11] https://www.youtube.com/watch?v=WBLbuJlF7kA</li> <li>[12] https://portail.lyc-la-martiniere-diderot.ac-lyon.fr/srv1/co/boucle_for_1.html</li> <li>[13] https://depinfo.u-cergy.fr/~tliu/ens/intro/correction-intro-info-4.pdf</li> <li>[14] https://www.youtube.com/watch?v=ZMjF4JcR7Go</li> <li>[15] https://www.collegerenecassincancale.ac-rennes.fr/spip.php?article177</li> <li>[16] https://librecours.net/modules/dev/js10/solweb/co/imbrication.html</li> <li>[17] https://codegym.cc/fr/groups/posts/fr.665.boucles-imbriquees-java</li> <li>[18] https://education.vex.com/stemlabs/fr/cs/cs-level-1-vexcode-vr-python/moving-disks-with-loops/lesson-4-using-nested-loops</li> <li>[19] https://codejumper.com/downloads/pdfs/lessons/fra/Code%20Jumper%20Lesson%2014%20Nested%20Loops_FRA.pdf</li> <li>[20] https://www.ibisc.univ-evry.fr/~dupont/SUPPORTS/DupontCours/SiteProg/TD/Correction/td2_solution.pdf</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/#exemple-somme-de-nombres-entiers","title":"Exemple : somme de nombres entiers","text":"<p>Voici un exemple de programme utilisant des boucles while imbriqu\u00e9es pour r\u00e9pondre \u00e0 votre demande :</p> <pre><code>somme = 0\ncontinuer = True\n\nwhile continuer:\n    entree_valide = False\n    while not entree_valide:\n        try:\n            nombre = int(input(\"Entrez un nombre entier positif (ou 0 ou n\u00e9gatif pour terminer) : \"))\n            entree_valide = True\n        except ValueError:\n            print(\"Erreur : Veuillez entrer un nombre entier valide.\")\n\n    if nombre &gt; 0:\n        somme += nombre\n    else:\n        continuer = False\n\nprint(f\"La somme des nombres entr\u00e9s est : {somme}\")\n</code></pre> <p>Ce programme fonctionne de la mani\u00e8re suivante :</p> <ol> <li> <p>La boucle ext\u00e9rieure (<code>while continuer:</code>) continue tant que l\u2019utilisateur entre des nombres positifs.</p> </li> <li> <p>La boucle int\u00e9rieure (<code>while not entree_valide:</code>) s\u2019assure que l\u2019entr\u00e9e est un entier valide :</p> <ul> <li>Elle utilise un bloc try/except pour convertir l\u2019entr\u00e9e en entier.</li> <li>Si la conversion r\u00e9ussit, <code>entree_valide</code> devient True et la boucle se termine.</li> <li>Si une <code>ValueError</code> est lev\u00e9e (entr\u00e9e non valide), un message d\u2019erreur est affich\u00e9 et la boucle continue.</li> </ul> </li> <li> <p>Apr\u00e8s la boucle int\u00e9rieure, le programme v\u00e9rifie si le nombre est positif :</p> <ul> <li>Si oui, il est ajout\u00e9 \u00e0 la somme.</li> <li>Sinon, <code>continuer</code> devient False, ce qui terminera la boucle ext\u00e9rieure.</li> </ul> </li> <li> <p>Enfin, le programme affiche la somme totale des nombres positifs entr\u00e9s.</p> </li> </ol> <p>Ce programme illustre bien l\u2019utilisation de boucles while imbriqu\u00e9es pour g\u00e9rer \u00e0 la fois la validation des entr\u00e9es ( boucle int\u00e9rieure) et la logique principale du programme (boucle ext\u00e9rieure)[5][6].</p> Citations <ul> <li>[1] https://www.datacamp.com/fr/tutorial/loops-python-tutorial</li> <li>[2] https://python.jpvweb.com/python/mesrecettespython/doku.php?id=boucles_imbriquees</li> <li>[3] https://librecours.net/modules/dev/js10/solweb/co/imbrication.html</li> <li>[4] https://www.data-bird.co/blog/boucle-for-python</li> <li>[5] https://www.ionos.fr/digitalguide/sites-internet/developpement-web/boucle-while-en-python/</li> <li>[6] https://courspython.com/boucles.html</li> <li>[7] https://www.reddit.com/r/learnpython/comments/1imx1me/python_nested_loop_for_and_while/?tl=fr</li> <li>[8] https://zestedesavoir.com/tutoriels/2514/un-zeste-de-python/7-perfectionnement/3-boucles/</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/#exemple-somme-de-nombres-entiers-avec-la-fonction-lire_entier","title":"Exemple : somme de nombres entiers avec la fonction <code>lire_entier</code> :","text":"<pre><code>def lire_entier(invite=\"Entrez un nombre entier : \"):\n    entree_valide = False\n    while not entree_valide:\n        try:\n            nombre = int(input(invite))\n            entree_valide = True\n        except ValueError:\n            print(\"Erreur : Veuillez entrer un nombre entier valide.\")\n    return nombre\n\n\ndef main():\n    somme = 0\n    continuer = True\n\n    while continuer:\n        nombre = lire_entier(\"Entrez un nombre entier positif (ou 0 ou n\u00e9gatif pour terminer) : \")\n\n        if nombre &gt; 0:\n            somme += nombre\n        else:\n            continuer = False\n\n    print(f\"La somme des nombres entr\u00e9s est : {somme}\")\n\n\nmain()\n</code></pre>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/#fonction-lire_entier","title":"Fonction <code>lire_entier</code>","text":"<p>Cette fonction est con\u00e7ue pour lire un entier saisi par l\u2019utilisateur :</p> <ol> <li>Elle prend un param\u00e8tre optionnel <code>invite</code> avec une valeur par d\u00e9faut[6].</li> <li>Elle utilise une boucle <code>while not entree_valide</code> pour continuer \u00e0 demander une entr\u00e9e jusqu\u2019\u00e0 ce qu\u2019un entier valide    soit fourni[5].</li> <li>La fonction <code>input</code> est utilis\u00e9e pour obtenir l\u2019entr\u00e9e de l\u2019utilisateur sous forme de cha\u00eene de caract\u00e8res[9].</li> <li>La conversion en entier est tent\u00e9e avec <code>int()</code>[5].</li> <li>Si la conversion r\u00e9ussit, l\u2019entr\u00e9e devient valide et on fait <code>entree_valide = True</code>.</li> <li>En cas d\u2019erreur (entr\u00e9e non valide), un message d\u2019erreur est affich\u00e9 et la boucle continue.</li> <li>Le nombre est retourn\u00e9 \u00e0 la fin.</li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/#fonction-main","title":"Fonction <code>main</code>","text":"<p>Cette fonction contient la logique principale du programme :</p> <ol> <li>Elle initialise une variable <code>somme</code> \u00e0 0 et une variable de contr\u00f4le <code>continuer</code> \u00e0 <code>True</code>.</li> <li>Une boucle <code>while</code> s\u2019ex\u00e9cute tant que <code>continuer</code> est <code>True</code>.</li> <li>\u00c0 chaque it\u00e9ration, elle appelle <code>lire_entier</code> avec un message sp\u00e9cifique.</li> <li>Si le nombre est positif, il est ajout\u00e9 \u00e0 la somme.</li> <li>Si le nombre est 0 ou n\u00e9gatif, la boucle se termine en mettant <code>continuer</code> \u00e0 <code>False</code>.</li> <li>Apr\u00e8s la boucle, la somme totale est affich\u00e9e.</li> </ol> <p>Cette structure permet de demander r\u00e9p\u00e9titivement des nombres \u00e0 l\u2019utilisateur, tout en g\u00e9rant les erreurs de saisie et en arr\u00eatant le processus lorsqu\u2019un nombre non positif est entr\u00e9[1][2].</p> Citations <ul> <li>[1] https://courspython.com/fonctions.html</li> <li>[2] https://www.docstring.fr/glossaire/parametre/</li> <li>[3] https://rtavenar.github.io/poly_python/content/chaines.html</li> <li>[4] https://www.pierre-giraud.com/python-apprendre-programmer-cours/parametre-argument-fonction/</li> <li>[5] https://www.pythoniaformation.com/blog/tutoriels-python-par-categories/projet-debutant-python-supercool/range-python</li> <li>[6] https://docs.python.org/fr/dev/tutorial/controlflow.html</li> <li>[7] https://python.sdv.u-paris.fr/07_fichiers/</li> <li>[8] https://reeborg.ca/docs/fr/variables/arguments1b.html</li> <li>[9] https://www.docstring.fr/formations/faq/ligne-de-commande/comment-lire-lentree-de-lutilisateur-en-python/</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/18-boucles-imbriqu%C3%A9es/#exemple-deviner-un-nombre","title":"Exemple : deviner un nombre","text":"<pre><code>import random\n\ndef lire_entier(invite=\"Entrez un nombre entier : \"):\n    entree_valide = False\n    while not entree_valide:\n        try:\n            nombre = int(input(invite))\n            entree_valide = True\n        except ValueError:\n            print(\"Erreur : Veuillez entrer un nombre entier valide.\")\n    return nombre\n\n\ndef lire_entier_positif(invite=\"Entrez un nombre entier positif : \"):\n    entree_valide = False\n    while not entree_valide:\n        try:\n            nombre = int(input(invite))\n            if nombre &gt; 0:\n                entree_valide = True\n            else:\n                print(\"Ce nombre n'est pas plus grand que 0.\")\n        except ValueError:\n            print(\"Erreur : Veuillez entrer un nombre entier valide.\")\n    return nombre\n\n\ndef main():\n    valeur_max = lire_entier_positif(\"Entrez la valeur maximale : \")\n    invite = f\"Devinez un nombre entier entre 1 et {valeur_max} inclusivement : \"\n    cible = random.randint(1, valeur_max)\n    # print(cible)  # ne pas oublier d'effacer cette ligne\n    essai = lire_entier(invite)\n    while cible != essai:\n        print(\"Incorrect ! Essayez de nouveau.\")\n        if essai &lt; cible:\n            print(\"Trop bas !\")\n        else:\n            print(\"Trop haut!\")\n        essai = lire_entier(invite)\n\n    print(\"Vous avez gagn\u00e9 !\")\n\nmain()\n</code></pre> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI. L\u2019IA a \u00e9t\u00e9    utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations    ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/","title":"19. Fichiers","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#ecrire-dans-un-fichier","title":"\u00c9crire dans un fichier","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#exemple","title":"Exemple","text":"<pre><code>import random\n\nnom_fichier = \"nombres.txt\"\n\nprint(\"\u00c9criture du fichier\")\nwith open(nom_fichier, \"w\") as fichier:\n    n = random.randint(1, 10)\n    for i in range(n):\n        x = random.randint(-100, 100)\n        fichier.write(f\"{x}\\n\")\n</code></pre> <p>Ce code g\u00e9n\u00e8re un ensemble al\u00e9atoire de nombres entiers et les \u00e9crit dans un fichier texte. Voici une explication d\u00e9taill\u00e9e:</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#analyse-du-code","title":"Analyse du code","text":"<ol> <li> <p><code>import random</code>: Cette ligne importe le module random qui permet de g\u00e9n\u00e9rer des nombres al\u00e9atoires en Python[5][9].</p> </li> <li> <p><code>nom_fichier = \"nombres.txt\"</code>: D\u00e9finit le nom du fichier dans lequel les nombres seront \u00e9crits.</p> </li> <li> <p><code>print(\"\u00c9criture du fichier\")</code>: Affiche un message indiquant que le processus d\u2019\u00e9criture du fichier commence.</p> </li> <li> <p><code>with open(nom_fichier, \"w\") as fichier:</code>: Ouvre le fichier en mode \u00e9criture (\u201cw\u201d). L\u2019utilisation de l\u2019instruction    <code>with</code> garantit que le fichier sera correctement ferm\u00e9 apr\u00e8s l\u2019ex\u00e9cution du bloc d\u2019instructions, m\u00eame si une erreur    se produit[1][7][10].</p> </li> <li> <p><code>n = random.randint(1, 10)</code>: G\u00e9n\u00e8re un nombre entier al\u00e9atoire entre 1 et 10 inclus. Ce nombre d\u00e9terminera combien de    nombres al\u00e9atoires seront g\u00e9n\u00e9r\u00e9s et \u00e9crits dans le fichier[5][9][12].</p> </li> <li> <p><code>for i in range(n):</code>: Cr\u00e9e une boucle qui s\u2019ex\u00e9cutera <code>n</code> fois.</p> </li> <li> <p><code>x = random.randint(-100, 100)</code>: \u00c0 chaque it\u00e9ration de la boucle, g\u00e9n\u00e8re un nombre entier al\u00e9atoire entre -100 et 100    inclus[5][9].</p> </li> <li> <p><code>fichier.write(f\"{x}\\n\")</code>: \u00c9crit le nombre g\u00e9n\u00e9r\u00e9 dans le fichier, suivi d\u2019un retour \u00e0 la ligne (<code>\\n</code>). La notation    <code>f\"{x}\"</code> est une f-string qui permet de formater facilement la cha\u00eene de caract\u00e8res avec la valeur de la variable    <code>x</code>[1][4][10].</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#resultat","title":"R\u00e9sultat","text":"<p>Apr\u00e8s l\u2019ex\u00e9cution de ce code, un fichier nomm\u00e9 \u201cnombres.txt\u201d sera cr\u00e9\u00e9 dans le r\u00e9pertoire courant. Ce fichier contiendra entre 1 et 10 nombres entiers al\u00e9atoires (compris entre -100 et 100), chacun sur une ligne distincte. Le nombre exact de lignes est lui-m\u00eame d\u00e9termin\u00e9 al\u00e9atoirement par la variable <code>n</code>.</p> <p>Par exemple, si <code>n = 3</code>, le fichier pourrait contenir:</p> <pre><code>-42\n78\n-15\n</code></pre> Citations <ul> <li>[1] https://www.docstring.fr/formations/faq/fichiers/comment-lire-et-ecrire-dans-un-fichier-en-python/</li> <li>[2] https://www.docstring.fr/formations/faq/librairie-standard/comment-generer-des-nombres-aleatoires-en-python/</li> <li>[3] https://stackoverflow.com/questions/72163990/generate-random-numbers-and-write-to-text-file</li> <li>[4] https://blog.alphorm.com/maitriser-la-manipulation-de-fichiers-en-python</li> <li>[5] https://diveintopython.org/fr/learn/modules/popular-modules/random</li> <li>[6] https://pynative.com/python-random-randrange/</li> <li>[7] https://python.sdv.u-paris.fr/07_fichiers/</li> <li>[8] https://docs.python.org/fr/3.13/library/random.html</li> <li>[9] https://ioflood.com/blog/randint-python/</li> <li>[10] https://python.doctor/page-lire-ecrire-creer-fichier-python</li> <li>[11] https://openclassrooms.com/fr/courses/6204541-initiez-vous-a-python-pour-l\u2019analyse-de-donnees/6252451-manipulez-des-nombres-aleatoires-avec-le-module-random</li> <li>[12] https://www.w3schools.com/python/ref_random_randint.asp</li> <li>[13] https://www.youtube.com/watch?v=qSYvF4GJWac</li> <li>[14] https://www.workdispo.com/blog/random-python</li> <li>[15] https://docs.python.org/3/library/random.html</li> <li>[16] https://programminghistorian.org/fr/lecons/travailler-avec-des-fichiers-texte</li> <li>[17] https://docs.python.org/fr/3.9/library/random.html</li> <li>[18] https://www.cs2study.com/wp-content/uploads/2021/03/random-function.pdf</li> <li>[19] https://zestedesavoir.com/tutoriels/2514/un-zeste-de-python/6-entrees-sorties/4-ecriture-fichier/</li> <li>[20] https://www.ionos.fr/digitalguide/sites-internet/developpement-web/python-random/</li> </ul>"},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#lire-le-contenu-dun-fichier","title":"Lire le contenu d\u2019un fichier","text":""},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#exemple_1","title":"Exemple","text":"<pre><code>import random\n\nnom_fichier = \"nombres.txt\"\n\nprint(\"Lecture du fichier\")\nwith open(nom_fichier, \"r\") as fichier:\n    lignes = fichier.readlines()\n    somme = 0\n    for ligne in lignes:\n        x = int(ligne)\n        if x &gt; 0:\n            somme += x\n    print(\"Le somme des nombres positifs est\", somme)\n</code></pre> <p>Ce code lit un fichier texte contenant des nombres et calcule la somme des nombres positifs. Voici une explication d\u00e9taill\u00e9e:</p>"},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#analyse-du-code_1","title":"Analyse du code","text":"<ol> <li> <p><code>import random</code>: Cette ligne importe le module random, bien qu\u2019il ne soit pas utilis\u00e9 dans le code pr\u00e9sent\u00e9.</p> </li> <li> <p><code>nom_fichier = \"nombres.txt\"</code>: D\u00e9finit le nom du fichier qui sera lu. Ce fichier doit contenir des nombres, chacun    sur une ligne diff\u00e9rente.</p> </li> <li> <p><code>print(\"Lecture du fichier\")</code>: Affiche un message indiquant que le processus de lecture du fichier commence.</p> </li> <li> <p><code>with open(nom_fichier, \"r\") as fichier:</code>: Ouvre le fichier en mode lecture (\u201cr\u201d). L\u2019utilisation de l\u2019instruction    <code>with</code> garantit que le fichier sera correctement ferm\u00e9 apr\u00e8s l\u2019ex\u00e9cution du bloc d\u2019instructions[3][7].</p> </li> <li> <p><code>lignes = fichier.readlines()</code>: Lit toutes les lignes du fichier et les stocke dans une liste appel\u00e9e <code>lignes</code>.    Chaque \u00e9l\u00e9ment de cette liste correspond \u00e0 une ligne du fichier, y compris le caract\u00e8re de fin de ligne (\\n)[1][3].</p> </li> <li> <p><code>somme = 0</code>: Initialise une variable pour stocker la somme des nombres positifs.</p> </li> <li> <p><code>for ligne in lignes:</code>: Cr\u00e9e une boucle qui parcourt chaque ligne du fichier.</p> </li> <li> <p><code>x = int(ligne)</code>: Convertit la ligne (qui est une cha\u00eene de caract\u00e8res) en nombre entier.</p> </li> <li> <p><code>if x &gt; 0:</code>: V\u00e9rifie si le nombre est positif (strictement sup\u00e9rieur \u00e0 z\u00e9ro).</p> </li> <li> <p><code>somme += x</code>: Si le nombre est positif, l\u2019ajoute \u00e0 la somme.</p> </li> <li> <p><code>print(\"Le somme des nombres positifs est\", somme)</code>: Affiche le r\u00e9sultat final, c\u2019est-\u00e0-dire la somme de tous les     nombres positifs trouv\u00e9s dans le fichier.</p> </li> </ol>"},{"location":"R%C3%A9sum%C3%A9/Notions/19-fichiers/#fonctionnement","title":"Fonctionnement","text":"<p>Ce programme est con\u00e7u pour calculer la somme des nombres positifs contenus dans un fichier texte. Il ignore les nombres n\u00e9gatifs et z\u00e9ro. Par exemple, si le fichier \u201cnombres.txt\u201d contient:</p> <pre><code>12\n23\n-10\n56\n-45\n</code></pre> <p>Le programme calculera 12 + 23 + 56 = 91 et affichera \u201cLe somme des nombres positifs est 91\u201d[6][12].</p> <p>Cette approche est couramment utilis\u00e9e pour traiter des donn\u00e9es num\u00e9riques stock\u00e9es dans des fichiers texte, en appliquant des filtres (ici, seulement les nombres positifs) avant de r\u00e9aliser des calculs[4][14].</p> Citations <ul> <li>[1] https://blog.alphorm.com/maitriser-la-manipulation-de-fichiers-en-python</li> <li>[2] https://www.mathweb.fr/euclide/2021/04/19/somme-des-chiffres-dun-nombre-en-python/</li> <li>[3] https://www.docstring.fr/formations/faq/fichiers/comment-lire-et-ecrire-dans-un-fichier-en-python/</li> <li>[4] https://profound.academy/fr/python-introduction/somme-des-chiffres-7pqPTN6mfw0DnYUYWTOF</li> <li>[5] https://zestedesavoir.com/tutoriels/2514/un-zeste-de-python/6-entrees-sorties/2-lecture-fichier/</li> <li>[6] https://openclassrooms.com/forum/sujet/exercice-python-moyenne</li> <li>[7] https://numerique.ostralo.net/python_AideMemoire/09_Fichiers_texte.htm</li> <li>[8] https://rtavenar.github.io/exos_python/gen/2_6_%20Nombres%20_%20somme%20des%20chiffres.html</li> <li>[9] https://python.doctor/page-lire-ecrire-creer-fichier-python</li> <li>[10] https://docs.python.org/fr/3.5/library/math.html</li> <li>[11] https://www.zonensi.fr/Miscellanees/Bases_Python/Fichiers_Textes/</li> <li>[12] https://www.reddit.com/r/learnpython/comments/pnvy6b/how_to_create_a_program_to_compute_the_sum_of/?tl=fr</li> <li>[13] https://python.sdv.u-paris.fr/07_fichiers/</li> <li>[14] https://profound.academy/fr/python-introduction/positifs-aenqxFhilm2M8wC7pt4S</li> <li>[15] https://openclassrooms.com/fr/courses/7168871-apprenez-les-bases-du-langage-python/7300396-chargez-des-donnees-avec-python</li> <li>[16] https://contester.asuscomm.com/fr/CourseTask_B.aspx?id=37953&amp;idcourse=35158</li> <li>[17] https://programminghistorian.org/fr/lecons/travailler-avec-des-fichiers-texte</li> <li>[18] https://informathix.tuxfamily.org/?q=node%2F109</li> <li>[19] https://clogique.fr/nsi/premiere/fichiers/fic1/</li> <li>[20] https://www.data-bird.co/blog/guide-variables-python</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI. L\u2019IA a \u00e9t\u00e9    utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations    ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"}]}